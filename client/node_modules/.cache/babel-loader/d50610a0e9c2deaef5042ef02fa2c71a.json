{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { DEFAULT_HEADERS } from '../lib/constants';\nimport { isStorageError } from '../lib/errors';\nimport { get, post, put, remove } from '../lib/fetch';\nimport { resolveFetch } from '../lib/helpers';\nexport default class StorageBucketApi {\n  constructor(url) {\n    let headers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let fetch = arguments.length > 2 ? arguments[2] : undefined;\n    this.url = url;\n    this.headers = Object.assign(Object.assign({}, DEFAULT_HEADERS), headers);\n    this.fetch = resolveFetch(fetch);\n  }\n  /**\r\n   * Retrieves the details of all Storage buckets within an existing project.\r\n   */\n\n\n  listBuckets() {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield get(this.fetch, `${this.url}/bucket`, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n\n        throw error;\n      }\n    });\n  }\n  /**\r\n   * Retrieves the details of an existing Storage bucket.\r\n   *\r\n   * @param id The unique identifier of the bucket you would like to retrieve.\r\n   */\n\n\n  getBucket(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield get(this.fetch, `${this.url}/bucket/${id}`, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n\n        throw error;\n      }\n    });\n  }\n  /**\r\n   * Creates a new Storage bucket\r\n   *\r\n   * @param id A unique identifier for the bucket you are creating.\r\n   * @param options.public The visibility of the bucket. Public buckets don't require an authorization token to download objects, but still require a valid token for all other operations. By default, buckets are private.\r\n   * @param options.fileSizeLimit specifies the file size limit that this bucket can accept during upload\r\n   * @param options.allowedMimeTypes specifies the allowed mime types that this bucket can accept during upload\r\n   * @returns newly created bucket id\r\n   */\n\n\n  createBucket(id) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      public: false\n    };\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield post(this.fetch, `${this.url}/bucket`, {\n          id,\n          name: id,\n          public: options.public,\n          file_size_limit: options.fileSizeLimit,\n          allowed_mime_types: options.allowedMimeTypes\n        }, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n\n        throw error;\n      }\n    });\n  }\n  /**\r\n   * Updates a Storage bucket\r\n   *\r\n   * @param id A unique identifier for the bucket you are updating.\r\n   * @param options.public The visibility of the bucket. Public buckets don't require an authorization token to download objects, but still require a valid token for all other operations.\r\n   * @param options.fileSizeLimit specifies the file size limit that this bucket can accept during upload\r\n   * @param options.allowedMimeTypes specifies the allowed mime types that this bucket can accept during upload\r\n   */\n\n\n  updateBucket(id, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield put(this.fetch, `${this.url}/bucket/${id}`, {\n          id,\n          name: id,\n          public: options.public,\n          file_size_limit: options.fileSizeLimit,\n          allowed_mime_types: options.allowedMimeTypes\n        }, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n\n        throw error;\n      }\n    });\n  }\n  /**\r\n   * Removes all objects inside a single bucket.\r\n   *\r\n   * @param id The unique identifier of the bucket you would like to empty.\r\n   */\n\n\n  emptyBucket(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield post(this.fetch, `${this.url}/bucket/${id}/empty`, {}, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n\n        throw error;\n      }\n    });\n  }\n  /**\r\n   * Deletes an existing bucket. A bucket can't be deleted with existing objects inside it.\r\n   * You must first `empty()` the bucket.\r\n   *\r\n   * @param id The unique identifier of the bucket you would like to delete.\r\n   */\n\n\n  deleteBucket(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield remove(this.fetch, `${this.url}/bucket/${id}`, {}, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n\n        throw error;\n      }\n    });\n  }\n\n}","map":{"version":3,"mappings":"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","names":["DEFAULT_HEADERS","isStorageError","get","post","put","remove","resolveFetch","StorageBucketApi","constructor","url","headers","fetch","Object","listBuckets","data","error","getBucket","id","createBucket","options","public","name","file_size_limit","fileSizeLimit","allowed_mime_types","allowedMimeTypes","updateBucket","emptyBucket","deleteBucket"],"sources":["C:\\Users\\mumta\\crewmates\\client\\node_modules\\@supabase\\storage-js\\src\\packages\\StorageBucketApi.ts"],"sourcesContent":["import { DEFAULT_HEADERS } from '../lib/constants'\r\nimport { isStorageError, StorageError } from '../lib/errors'\r\nimport { Fetch, get, post, put, remove } from '../lib/fetch'\r\nimport { resolveFetch } from '../lib/helpers'\r\nimport { Bucket } from '../lib/types'\r\n\r\nexport default class StorageBucketApi {\r\n  protected url: string\r\n  protected headers: { [key: string]: string }\r\n  protected fetch: Fetch\r\n\r\n  constructor(url: string, headers: { [key: string]: string } = {}, fetch?: Fetch) {\r\n    this.url = url\r\n    this.headers = { ...DEFAULT_HEADERS, ...headers }\r\n    this.fetch = resolveFetch(fetch)\r\n  }\r\n\r\n  /**\r\n   * Retrieves the details of all Storage buckets within an existing project.\r\n   */\r\n  async listBuckets(): Promise<\r\n    | {\r\n        data: Bucket[]\r\n        error: null\r\n      }\r\n    | {\r\n        data: null\r\n        error: StorageError\r\n      }\r\n  > {\r\n    try {\r\n      const data = await get(this.fetch, `${this.url}/bucket`, { headers: this.headers })\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      if (isStorageError(error)) {\r\n        return { data: null, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Retrieves the details of an existing Storage bucket.\r\n   *\r\n   * @param id The unique identifier of the bucket you would like to retrieve.\r\n   */\r\n  async getBucket(\r\n    id: string\r\n  ): Promise<\r\n    | {\r\n        data: Bucket\r\n        error: null\r\n      }\r\n    | {\r\n        data: null\r\n        error: StorageError\r\n      }\r\n  > {\r\n    try {\r\n      const data = await get(this.fetch, `${this.url}/bucket/${id}`, { headers: this.headers })\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      if (isStorageError(error)) {\r\n        return { data: null, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates a new Storage bucket\r\n   *\r\n   * @param id A unique identifier for the bucket you are creating.\r\n   * @param options.public The visibility of the bucket. Public buckets don't require an authorization token to download objects, but still require a valid token for all other operations. By default, buckets are private.\r\n   * @param options.fileSizeLimit specifies the file size limit that this bucket can accept during upload\r\n   * @param options.allowedMimeTypes specifies the allowed mime types that this bucket can accept during upload\r\n   * @returns newly created bucket id\r\n   */\r\n  async createBucket(\r\n    id: string,\r\n    options: { public: boolean; fileSizeLimit?: number | string; allowedMimeTypes?: string[] } = {\r\n      public: false,\r\n    }\r\n  ): Promise<\r\n    | {\r\n        data: Pick<Bucket, 'name'>\r\n        error: null\r\n      }\r\n    | {\r\n        data: null\r\n        error: StorageError\r\n      }\r\n  > {\r\n    try {\r\n      const data = await post(\r\n        this.fetch,\r\n        `${this.url}/bucket`,\r\n        {\r\n          id,\r\n          name: id,\r\n          public: options.public,\r\n          file_size_limit: options.fileSizeLimit,\r\n          allowed_mime_types: options.allowedMimeTypes,\r\n        },\r\n        { headers: this.headers }\r\n      )\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      if (isStorageError(error)) {\r\n        return { data: null, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates a Storage bucket\r\n   *\r\n   * @param id A unique identifier for the bucket you are updating.\r\n   * @param options.public The visibility of the bucket. Public buckets don't require an authorization token to download objects, but still require a valid token for all other operations.\r\n   * @param options.fileSizeLimit specifies the file size limit that this bucket can accept during upload\r\n   * @param options.allowedMimeTypes specifies the allowed mime types that this bucket can accept during upload\r\n   */\r\n  async updateBucket(\r\n    id: string,\r\n    options: { public: boolean; fileSizeLimit?: number | string; allowedMimeTypes?: string[] }\r\n  ): Promise<\r\n    | {\r\n        data: { message: string }\r\n        error: null\r\n      }\r\n    | {\r\n        data: null\r\n        error: StorageError\r\n      }\r\n  > {\r\n    try {\r\n      const data = await put(\r\n        this.fetch,\r\n        `${this.url}/bucket/${id}`,\r\n        {\r\n          id,\r\n          name: id,\r\n          public: options.public,\r\n          file_size_limit: options.fileSizeLimit,\r\n          allowed_mime_types: options.allowedMimeTypes,\r\n        },\r\n        { headers: this.headers }\r\n      )\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      if (isStorageError(error)) {\r\n        return { data: null, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes all objects inside a single bucket.\r\n   *\r\n   * @param id The unique identifier of the bucket you would like to empty.\r\n   */\r\n  async emptyBucket(\r\n    id: string\r\n  ): Promise<\r\n    | {\r\n        data: { message: string }\r\n        error: null\r\n      }\r\n    | {\r\n        data: null\r\n        error: StorageError\r\n      }\r\n  > {\r\n    try {\r\n      const data = await post(\r\n        this.fetch,\r\n        `${this.url}/bucket/${id}/empty`,\r\n        {},\r\n        { headers: this.headers }\r\n      )\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      if (isStorageError(error)) {\r\n        return { data: null, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deletes an existing bucket. A bucket can't be deleted with existing objects inside it.\r\n   * You must first `empty()` the bucket.\r\n   *\r\n   * @param id The unique identifier of the bucket you would like to delete.\r\n   */\r\n  async deleteBucket(\r\n    id: string\r\n  ): Promise<\r\n    | {\r\n        data: { message: string }\r\n        error: null\r\n      }\r\n    | {\r\n        data: null\r\n        error: StorageError\r\n      }\r\n  > {\r\n    try {\r\n      const data = await remove(\r\n        this.fetch,\r\n        `${this.url}/bucket/${id}`,\r\n        {},\r\n        { headers: this.headers }\r\n      )\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      if (isStorageError(error)) {\r\n        return { data: null, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}