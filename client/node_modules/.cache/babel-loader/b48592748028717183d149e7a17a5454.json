{"ast":null,"code":"import _classCallCheck from \"C:/Users/mumta/crewmates/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/mumta/crewmates/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\n// This file draws heavily from https://github.com/phoenixframework/phoenix/commit/cf098e9cf7a44ee6479d31d911a97d3c7430c6fe\n// License: https://github.com/phoenixframework/phoenix/blob/master/LICENSE.md\nvar Serializer = /*#__PURE__*/function () {\n  function Serializer() {\n    _classCallCheck(this, Serializer);\n\n    this.HEADER_LENGTH = 1;\n  }\n\n  _createClass(Serializer, [{\n    key: \"decode\",\n    value: function decode(rawPayload, callback) {\n      if (rawPayload.constructor === ArrayBuffer) {\n        return callback(this._binaryDecode(rawPayload));\n      }\n\n      if (typeof rawPayload === 'string') {\n        return callback(JSON.parse(rawPayload));\n      }\n\n      return callback({});\n    }\n  }, {\n    key: \"_binaryDecode\",\n    value: function _binaryDecode(buffer) {\n      var view = new DataView(buffer);\n      var decoder = new TextDecoder();\n      return this._decodeBroadcast(buffer, view, decoder);\n    }\n  }, {\n    key: \"_decodeBroadcast\",\n    value: function _decodeBroadcast(buffer, view, decoder) {\n      var topicSize = view.getUint8(1);\n      var eventSize = view.getUint8(2);\n      var offset = this.HEADER_LENGTH + 2;\n      var topic = decoder.decode(buffer.slice(offset, offset + topicSize));\n      offset = offset + topicSize;\n      var event = decoder.decode(buffer.slice(offset, offset + eventSize));\n      offset = offset + eventSize;\n      var data = JSON.parse(decoder.decode(buffer.slice(offset, buffer.byteLength)));\n      return {\n        ref: null,\n        topic: topic,\n        event: event,\n        payload: data\n      };\n    }\n  }]);\n\n  return Serializer;\n}();\n\nexport { Serializer as default };","map":{"version":3,"mappings":";;;AAAA;AACA;IAEqBA,U;EAArB;IAAA;;IACE,qBAAgB,CAAhB;EA4CD;;;;WA1CC,gBAAOC,UAAP,EAAyCC,QAAzC,EAA2D;MACzD,IAAID,UAAU,CAACE,WAAX,KAA2BC,WAA/B,EAA4C;QAC1C,OAAOF,QAAQ,CAAC,KAAKG,aAAL,CAAmBJ,UAAnB,CAAD,CAAf;MACD;;MAED,IAAI,OAAOA,UAAP,KAAsB,QAA1B,EAAoC;QAClC,OAAOC,QAAQ,CAACI,IAAI,CAACC,KAAL,CAAWN,UAAX,CAAD,CAAf;MACD;;MAED,OAAOC,QAAQ,CAAC,EAAD,CAAf;IACD;;;WAEO,uBAAcM,MAAd,EAAiC;MACvC,IAAMC,IAAI,GAAG,IAAIC,QAAJ,CAAaF,MAAb,CAAb;MACA,IAAMG,OAAO,GAAG,IAAIC,WAAJ,EAAhB;MAEA,OAAO,KAAKC,gBAAL,CAAsBL,MAAtB,EAA8BC,IAA9B,EAAoCE,OAApC,CAAP;IACD;;;WAEO,0BACNH,MADM,EAENC,IAFM,EAGNE,OAHM,EAGc;MAOpB,IAAMG,SAAS,GAAGL,IAAI,CAACM,QAAL,CAAc,CAAd,CAAlB;MACA,IAAMC,SAAS,GAAGP,IAAI,CAACM,QAAL,CAAc,CAAd,CAAlB;MACA,IAAIE,MAAM,GAAG,KAAKC,aAAL,GAAqB,CAAlC;MACA,IAAMC,KAAK,GAAGR,OAAO,CAACS,MAAR,CAAeZ,MAAM,CAACa,KAAP,CAAaJ,MAAb,EAAqBA,MAAM,GAAGH,SAA9B,CAAf,CAAd;MACAG,MAAM,GAAGA,MAAM,GAAGH,SAAlB;MACA,IAAMQ,KAAK,GAAGX,OAAO,CAACS,MAAR,CAAeZ,MAAM,CAACa,KAAP,CAAaJ,MAAb,EAAqBA,MAAM,GAAGD,SAA9B,CAAf,CAAd;MACAC,MAAM,GAAGA,MAAM,GAAGD,SAAlB;MACA,IAAMO,IAAI,GAAGjB,IAAI,CAACC,KAAL,CACXI,OAAO,CAACS,MAAR,CAAeZ,MAAM,CAACa,KAAP,CAAaJ,MAAb,EAAqBT,MAAM,CAACgB,UAA5B,CAAf,CADW,CAAb;MAIA,OAAO;QAAEC,GAAG,EAAE,IAAP;QAAaN,KAAK,EAAEA,KAApB;QAA2BG,KAAK,EAAEA,KAAlC;QAAyCI,OAAO,EAAEH;MAAlD,CAAP;IACD;;;;;;SA5CkBvB,U","names":["Serializer","rawPayload","callback","constructor","ArrayBuffer","_binaryDecode","JSON","parse","buffer","view","DataView","decoder","TextDecoder","_decodeBroadcast","topicSize","getUint8","eventSize","offset","HEADER_LENGTH","topic","decode","slice","event","data","byteLength","ref","payload"],"sources":["C:\\Users\\mumta\\crewmates\\client\\node_modules\\@supabase\\realtime-js\\src\\lib\\serializer.ts"],"sourcesContent":["// This file draws heavily from https://github.com/phoenixframework/phoenix/commit/cf098e9cf7a44ee6479d31d911a97d3c7430c6fe\r\n// License: https://github.com/phoenixframework/phoenix/blob/master/LICENSE.md\r\n\r\nexport default class Serializer {\r\n  HEADER_LENGTH = 1\r\n\r\n  decode(rawPayload: ArrayBuffer | string, callback: Function) {\r\n    if (rawPayload.constructor === ArrayBuffer) {\r\n      return callback(this._binaryDecode(rawPayload))\r\n    }\r\n\r\n    if (typeof rawPayload === 'string') {\r\n      return callback(JSON.parse(rawPayload))\r\n    }\r\n\r\n    return callback({})\r\n  }\r\n\r\n  private _binaryDecode(buffer: ArrayBuffer) {\r\n    const view = new DataView(buffer)\r\n    const decoder = new TextDecoder()\r\n\r\n    return this._decodeBroadcast(buffer, view, decoder)\r\n  }\r\n\r\n  private _decodeBroadcast(\r\n    buffer: ArrayBuffer,\r\n    view: DataView,\r\n    decoder: TextDecoder\r\n  ): {\r\n    ref: null\r\n    topic: string\r\n    event: string\r\n    payload: { [key: string]: any }\r\n  } {\r\n    const topicSize = view.getUint8(1)\r\n    const eventSize = view.getUint8(2)\r\n    let offset = this.HEADER_LENGTH + 2\r\n    const topic = decoder.decode(buffer.slice(offset, offset + topicSize))\r\n    offset = offset + topicSize\r\n    const event = decoder.decode(buffer.slice(offset, offset + eventSize))\r\n    offset = offset + eventSize\r\n    const data = JSON.parse(\r\n      decoder.decode(buffer.slice(offset, buffer.byteLength))\r\n    )\r\n\r\n    return { ref: null, topic: topic, event: event, payload: data }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}