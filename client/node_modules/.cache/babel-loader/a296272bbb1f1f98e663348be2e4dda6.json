{"ast":null,"code":"import PostgrestBuilder from './PostgrestBuilder';\nexport default class PostgrestTransformBuilder extends PostgrestBuilder {\n  /**\r\n   * Perform a SELECT on the query result.\r\n   *\r\n   * By default, `.insert()`, `.update()`, `.upsert()`, and `.delete()` do not\r\n   * return modified rows. By calling this method, modified rows are returned in\r\n   * `data`.\r\n   *\r\n   * @param columns - The columns to retrieve, separated by commas\r\n   */\n  select(columns) {\n    // Remove whitespaces except when quoted\n    let quoted = false;\n    const cleanedColumns = (columns !== null && columns !== void 0 ? columns : '*').split('').map(c => {\n      if (/\\s/.test(c) && !quoted) {\n        return '';\n      }\n\n      if (c === '\"') {\n        quoted = !quoted;\n      }\n\n      return c;\n    }).join('');\n    this.url.searchParams.set('select', cleanedColumns);\n\n    if (this.headers['Prefer']) {\n      this.headers['Prefer'] += ',';\n    }\n\n    this.headers['Prefer'] += 'return=representation';\n    return this;\n  }\n  /**\r\n   * Order the query result by `column`.\r\n   *\r\n   * You can call this method multiple times to order by multiple columns.\r\n   *\r\n   * You can order foreign tables, but it doesn't affect the ordering of the\r\n   * current table.\r\n   *\r\n   * @param column - The column to order by\r\n   * @param options - Named parameters\r\n   * @param options.ascending - If `true`, the result will be in ascending order\r\n   * @param options.nullsFirst - If `true`, `null`s appear first. If `false`,\r\n   * `null`s appear last.\r\n   * @param options.foreignTable - Set this to order a foreign table by foreign\r\n   * columns\r\n   */\n\n\n  order(column) {\n    let {\n      ascending = true,\n      nullsFirst,\n      foreignTable\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const key = foreignTable ? `${foreignTable}.order` : 'order';\n    const existingOrder = this.url.searchParams.get(key);\n    this.url.searchParams.set(key, `${existingOrder ? `${existingOrder},` : ''}${column}.${ascending ? 'asc' : 'desc'}${nullsFirst === undefined ? '' : nullsFirst ? '.nullsfirst' : '.nullslast'}`);\n    return this;\n  }\n  /**\r\n   * Limit the query result by `count`.\r\n   *\r\n   * @param count - The maximum number of rows to return\r\n   * @param options - Named parameters\r\n   * @param options.foreignTable - Set this to limit rows of foreign tables\r\n   * instead of the current table\r\n   */\n\n\n  limit(count) {\n    let {\n      foreignTable\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const key = typeof foreignTable === 'undefined' ? 'limit' : `${foreignTable}.limit`;\n    this.url.searchParams.set(key, `${count}`);\n    return this;\n  }\n  /**\r\n   * Limit the query result by `from` and `to` inclusively.\r\n   *\r\n   * @param from - The starting index from which to limit the result\r\n   * @param to - The last index to which to limit the result\r\n   * @param options - Named parameters\r\n   * @param options.foreignTable - Set this to limit rows of foreign tables\r\n   * instead of the current table\r\n   */\n\n\n  range(from, to) {\n    let {\n      foreignTable\n    } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const keyOffset = typeof foreignTable === 'undefined' ? 'offset' : `${foreignTable}.offset`;\n    const keyLimit = typeof foreignTable === 'undefined' ? 'limit' : `${foreignTable}.limit`;\n    this.url.searchParams.set(keyOffset, `${from}`); // Range is inclusive, so add 1\n\n    this.url.searchParams.set(keyLimit, `${to - from + 1}`);\n    return this;\n  }\n  /**\r\n   * Set the AbortSignal for the fetch request.\r\n   *\r\n   * @param signal - The AbortSignal to use for the fetch request\r\n   */\n\n\n  abortSignal(signal) {\n    this.signal = signal;\n    return this;\n  }\n  /**\r\n   * Return `data` as a single object instead of an array of objects.\r\n   *\r\n   * Query result must be one row (e.g. using `.limit(1)`), otherwise this\r\n   * returns an error.\r\n   */\n\n\n  single() {\n    this.headers['Accept'] = 'application/vnd.pgrst.object+json';\n    return this;\n  }\n  /**\r\n   * Return `data` as a single object instead of an array of objects.\r\n   *\r\n   * Query result must be zero or one row (e.g. using `.limit(1)`), otherwise\r\n   * this returns an error.\r\n   */\n\n\n  maybeSingle() {\n    this.headers['Accept'] = 'application/vnd.pgrst.object+json';\n    this.allowEmpty = true;\n    return this;\n  }\n  /**\r\n   * Return `data` as a string in CSV format.\r\n   */\n\n\n  csv() {\n    this.headers['Accept'] = 'text/csv';\n    return this;\n  }\n  /**\r\n   * Return `data` as an object in [GeoJSON](https://geojson.org) format.\r\n   */\n\n\n  geojson() {\n    this.headers['Accept'] = 'application/geo+json';\n    return this;\n  }\n  /**\r\n   * Return `data` as the EXPLAIN plan for the query.\r\n   *\r\n   * @param options - Named parameters\r\n   *\r\n   * @param options.analyze - If `true`, the query will be executed and the\r\n   * actual run time will be returned\r\n   *\r\n   * @param options.verbose - If `true`, the query identifier will be returned\r\n   * and `data` will include the output columns of the query\r\n   *\r\n   * @param options.settings - If `true`, include information on configuration\r\n   * parameters that affect query planning\r\n   *\r\n   * @param options.buffers - If `true`, include information on buffer usage\r\n   *\r\n   * @param options.wal - If `true`, include information on WAL record generation\r\n   *\r\n   * @param options.format - The format of the output, can be `\"text\"` (default)\r\n   * or `\"json\"`\r\n   */\n\n\n  explain() {\n    let {\n      analyze = false,\n      verbose = false,\n      settings = false,\n      buffers = false,\n      wal = false,\n      format = 'text'\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const options = [analyze ? 'analyze' : null, verbose ? 'verbose' : null, settings ? 'settings' : null, buffers ? 'buffers' : null, wal ? 'wal' : null].filter(Boolean).join('|'); // An Accept header can carry multiple media types but postgrest-js always sends one\n\n    const forMediatype = this.headers['Accept'];\n    this.headers['Accept'] = `application/vnd.pgrst.plan+${format}; for=\"${forMediatype}\"; options=${options};`;\n    if (format === 'json') return this;else return this;\n  }\n  /**\r\n   * Rollback the query.\r\n   *\r\n   * `data` will still be returned, but the query is not committed.\r\n   */\n\n\n  rollback() {\n    var _a;\n\n    if (((_a = this.headers['Prefer']) !== null && _a !== void 0 ? _a : '').trim().length > 0) {\n      this.headers['Prefer'] += ',tx=rollback';\n    } else {\n      this.headers['Prefer'] = 'tx=rollback';\n    }\n\n    return this;\n  }\n  /**\r\n   * Override the type of the returned `data`.\r\n   *\r\n   * @typeParam NewResult - The new result type to override with\r\n   */\n\n\n  returns() {\n    return this;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["PostgrestBuilder","PostgrestTransformBuilder","select","columns","quoted","cleanedColumns","split","map","c","test","join","url","searchParams","set","headers","order","column","ascending","nullsFirst","foreignTable","key","existingOrder","get","undefined","limit","count","range","from","to","keyOffset","keyLimit","abortSignal","signal","single","maybeSingle","allowEmpty","csv","geojson","explain","analyze","verbose","settings","buffers","wal","format","options","filter","Boolean","forMediatype","rollback","_a","trim","length","returns"],"sources":["C:\\Users\\mumta\\crewmates\\client\\node_modules\\@supabase\\postgrest-js\\src\\PostgrestTransformBuilder.ts"],"sourcesContent":["import PostgrestBuilder from './PostgrestBuilder'\r\nimport { GetResult } from './select-query-parser'\r\nimport { GenericSchema } from './types'\r\n\r\nexport default class PostgrestTransformBuilder<\r\n  Schema extends GenericSchema,\r\n  Row extends Record<string, unknown>,\r\n  Result\r\n> extends PostgrestBuilder<Result> {\r\n  /**\r\n   * Perform a SELECT on the query result.\r\n   *\r\n   * By default, `.insert()`, `.update()`, `.upsert()`, and `.delete()` do not\r\n   * return modified rows. By calling this method, modified rows are returned in\r\n   * `data`.\r\n   *\r\n   * @param columns - The columns to retrieve, separated by commas\r\n   */\r\n  select<Query extends string = '*', NewResultOne = GetResult<Schema, Row, Query>>(\r\n    columns?: Query\r\n  ): PostgrestTransformBuilder<Schema, Row, NewResultOne[]> {\r\n    // Remove whitespaces except when quoted\r\n    let quoted = false\r\n    const cleanedColumns = (columns ?? '*')\r\n      .split('')\r\n      .map((c) => {\r\n        if (/\\s/.test(c) && !quoted) {\r\n          return ''\r\n        }\r\n        if (c === '\"') {\r\n          quoted = !quoted\r\n        }\r\n        return c\r\n      })\r\n      .join('')\r\n    this.url.searchParams.set('select', cleanedColumns)\r\n    if (this.headers['Prefer']) {\r\n      this.headers['Prefer'] += ','\r\n    }\r\n    this.headers['Prefer'] += 'return=representation'\r\n    return this as unknown as PostgrestTransformBuilder<Schema, Row, NewResultOne[]>\r\n  }\r\n\r\n  order<ColumnName extends string & keyof Row>(\r\n    column: ColumnName,\r\n    options?: { ascending?: boolean; nullsFirst?: boolean; foreignTable?: undefined }\r\n  ): this\r\n  order(\r\n    column: string,\r\n    options?: { ascending?: boolean; nullsFirst?: boolean; foreignTable: string }\r\n  ): this\r\n  /**\r\n   * Order the query result by `column`.\r\n   *\r\n   * You can call this method multiple times to order by multiple columns.\r\n   *\r\n   * You can order foreign tables, but it doesn't affect the ordering of the\r\n   * current table.\r\n   *\r\n   * @param column - The column to order by\r\n   * @param options - Named parameters\r\n   * @param options.ascending - If `true`, the result will be in ascending order\r\n   * @param options.nullsFirst - If `true`, `null`s appear first. If `false`,\r\n   * `null`s appear last.\r\n   * @param options.foreignTable - Set this to order a foreign table by foreign\r\n   * columns\r\n   */\r\n  order(\r\n    column: string,\r\n    {\r\n      ascending = true,\r\n      nullsFirst,\r\n      foreignTable,\r\n    }: { ascending?: boolean; nullsFirst?: boolean; foreignTable?: string } = {}\r\n  ): this {\r\n    const key = foreignTable ? `${foreignTable}.order` : 'order'\r\n    const existingOrder = this.url.searchParams.get(key)\r\n\r\n    this.url.searchParams.set(\r\n      key,\r\n      `${existingOrder ? `${existingOrder},` : ''}${column}.${ascending ? 'asc' : 'desc'}${\r\n        nullsFirst === undefined ? '' : nullsFirst ? '.nullsfirst' : '.nullslast'\r\n      }`\r\n    )\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Limit the query result by `count`.\r\n   *\r\n   * @param count - The maximum number of rows to return\r\n   * @param options - Named parameters\r\n   * @param options.foreignTable - Set this to limit rows of foreign tables\r\n   * instead of the current table\r\n   */\r\n  limit(count: number, { foreignTable }: { foreignTable?: string } = {}): this {\r\n    const key = typeof foreignTable === 'undefined' ? 'limit' : `${foreignTable}.limit`\r\n    this.url.searchParams.set(key, `${count}`)\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Limit the query result by `from` and `to` inclusively.\r\n   *\r\n   * @param from - The starting index from which to limit the result\r\n   * @param to - The last index to which to limit the result\r\n   * @param options - Named parameters\r\n   * @param options.foreignTable - Set this to limit rows of foreign tables\r\n   * instead of the current table\r\n   */\r\n  range(from: number, to: number, { foreignTable }: { foreignTable?: string } = {}): this {\r\n    const keyOffset = typeof foreignTable === 'undefined' ? 'offset' : `${foreignTable}.offset`\r\n    const keyLimit = typeof foreignTable === 'undefined' ? 'limit' : `${foreignTable}.limit`\r\n    this.url.searchParams.set(keyOffset, `${from}`)\r\n    // Range is inclusive, so add 1\r\n    this.url.searchParams.set(keyLimit, `${to - from + 1}`)\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Set the AbortSignal for the fetch request.\r\n   *\r\n   * @param signal - The AbortSignal to use for the fetch request\r\n   */\r\n  abortSignal(signal: AbortSignal): this {\r\n    this.signal = signal\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Return `data` as a single object instead of an array of objects.\r\n   *\r\n   * Query result must be one row (e.g. using `.limit(1)`), otherwise this\r\n   * returns an error.\r\n   */\r\n  single<\r\n    ResultOne = Result extends (infer ResultOne)[] ? ResultOne : never\r\n  >(): PostgrestBuilder<ResultOne> {\r\n    this.headers['Accept'] = 'application/vnd.pgrst.object+json'\r\n    return this as PostgrestBuilder<ResultOne>\r\n  }\r\n\r\n  /**\r\n   * Return `data` as a single object instead of an array of objects.\r\n   *\r\n   * Query result must be zero or one row (e.g. using `.limit(1)`), otherwise\r\n   * this returns an error.\r\n   */\r\n  maybeSingle<\r\n    ResultOne = Result extends (infer ResultOne)[] ? ResultOne : never\r\n  >(): PostgrestBuilder<ResultOne | null> {\r\n    this.headers['Accept'] = 'application/vnd.pgrst.object+json'\r\n    this.allowEmpty = true\r\n    return this as PostgrestBuilder<ResultOne | null>\r\n  }\r\n\r\n  /**\r\n   * Return `data` as a string in CSV format.\r\n   */\r\n  csv(): PostgrestBuilder<string> {\r\n    this.headers['Accept'] = 'text/csv'\r\n    return this as PostgrestBuilder<string>\r\n  }\r\n\r\n  /**\r\n   * Return `data` as an object in [GeoJSON](https://geojson.org) format.\r\n   */\r\n  geojson(): PostgrestBuilder<Record<string, unknown>> {\r\n    this.headers['Accept'] = 'application/geo+json'\r\n    return this as PostgrestBuilder<Record<string, unknown>>\r\n  }\r\n\r\n  /**\r\n   * Return `data` as the EXPLAIN plan for the query.\r\n   *\r\n   * @param options - Named parameters\r\n   *\r\n   * @param options.analyze - If `true`, the query will be executed and the\r\n   * actual run time will be returned\r\n   *\r\n   * @param options.verbose - If `true`, the query identifier will be returned\r\n   * and `data` will include the output columns of the query\r\n   *\r\n   * @param options.settings - If `true`, include information on configuration\r\n   * parameters that affect query planning\r\n   *\r\n   * @param options.buffers - If `true`, include information on buffer usage\r\n   *\r\n   * @param options.wal - If `true`, include information on WAL record generation\r\n   *\r\n   * @param options.format - The format of the output, can be `\"text\"` (default)\r\n   * or `\"json\"`\r\n   */\r\n  explain({\r\n    analyze = false,\r\n    verbose = false,\r\n    settings = false,\r\n    buffers = false,\r\n    wal = false,\r\n    format = 'text',\r\n  }: {\r\n    analyze?: boolean\r\n    verbose?: boolean\r\n    settings?: boolean\r\n    buffers?: boolean\r\n    wal?: boolean\r\n    format?: 'json' | 'text'\r\n  } = {}): PostgrestBuilder<Record<string, unknown>[]> | PostgrestBuilder<string> {\r\n    const options = [\r\n      analyze ? 'analyze' : null,\r\n      verbose ? 'verbose' : null,\r\n      settings ? 'settings' : null,\r\n      buffers ? 'buffers' : null,\r\n      wal ? 'wal' : null,\r\n    ]\r\n      .filter(Boolean)\r\n      .join('|')\r\n    // An Accept header can carry multiple media types but postgrest-js always sends one\r\n    const forMediatype = this.headers['Accept']\r\n    this.headers[\r\n      'Accept'\r\n    ] = `application/vnd.pgrst.plan+${format}; for=\"${forMediatype}\"; options=${options};`\r\n    if (format === 'json') return this as PostgrestBuilder<Record<string, unknown>[]>\r\n    else return this as PostgrestBuilder<string>\r\n  }\r\n\r\n  /**\r\n   * Rollback the query.\r\n   *\r\n   * `data` will still be returned, but the query is not committed.\r\n   */\r\n  rollback(): this {\r\n    if ((this.headers['Prefer'] ?? '').trim().length > 0) {\r\n      this.headers['Prefer'] += ',tx=rollback'\r\n    } else {\r\n      this.headers['Prefer'] = 'tx=rollback'\r\n    }\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Override the type of the returned `data`.\r\n   *\r\n   * @typeParam NewResult - The new result type to override with\r\n   */\r\n  returns<NewResult>(): PostgrestTransformBuilder<Schema, Row, NewResult> {\r\n    return this as unknown as PostgrestTransformBuilder<Schema, Row, NewResult>\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}