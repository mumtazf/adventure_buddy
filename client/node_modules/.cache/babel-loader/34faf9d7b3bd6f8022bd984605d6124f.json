{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/mumta/crewmates/client/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nexport var resolveFetch = function resolveFetch(customFetch) {\n  var _fetch;\n\n  if (customFetch) {\n    _fetch = customFetch;\n  } else if (typeof fetch === 'undefined') {\n    _fetch = function _fetch() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var _yield$import;\n\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return import('cross-fetch');\n\n              case 2:\n                _context.next = 4;\n                return (_yield$import = _context.sent).fetch.apply(_yield$import, args);\n\n              case 4:\n                return _context.abrupt(\"return\", _context.sent);\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n    };\n  } else {\n    _fetch = fetch;\n  }\n\n  return function () {\n    return _fetch.apply(void 0, arguments);\n  };\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,OAAO,IAAMA,YAAY,GAAG,SAAfA,YAAe,CAACC,WAAD,EAA+B;EACzD,IAAIC,MAAJ;;EACA,IAAID,WAAJ,EAAiB;IACfC,MAAM,GAAGD,WAAT;EACD,CAFD,MAEO,IAAI,OAAOE,KAAP,KAAiB,WAArB,EAAkC;IACvCD,MAAM,GAAG;MAAA,kCAAUE,IAAV;QAAUA,IAAV;MAAA;;MAAA,OAAkBC;QAAA;;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAQ,OAAM,OAAO,aAAP,CAAN;;cAAR;gBAAA;gBAAC,uCAAoCF,KAApC,sBAA6CC,IAA7C;;cAAD;gBAAA;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,GAAlB;IAAA,CAAT;EACD,CAFM,MAEA;IACLF,MAAM,GAAGC,KAAT;EACD;;EACD,OAAO;IAAA,OAAaD,MAAM,MAAN,mBAAb;EAAA,CAAP;AACD,CAVM","names":["resolveFetch","customFetch","_fetch","fetch","args","__awaiter"],"sources":["C:\\Users\\mumta\\crewmates\\client\\node_modules\\@supabase\\functions-js\\src\\helper.ts"],"sourcesContent":["import { Fetch } from './types'\r\n\r\nexport const resolveFetch = (customFetch?: Fetch): Fetch => {\r\n  let _fetch: Fetch\r\n  if (customFetch) {\r\n    _fetch = customFetch\r\n  } else if (typeof fetch === 'undefined') {\r\n    _fetch = async (...args) => await (await import('cross-fetch')).fetch(...args)\r\n  } else {\r\n    _fetch = fetch\r\n  }\r\n  return (...args) => _fetch(...args)\r\n}\r\n"]},"metadata":{},"sourceType":"module"}