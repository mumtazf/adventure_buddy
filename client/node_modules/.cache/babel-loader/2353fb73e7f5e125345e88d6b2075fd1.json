{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/mumta/crewmates/client/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _classCallCheck from \"C:/Users/mumta/crewmates/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/mumta/crewmates/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { FunctionsClient } from '@supabase/functions-js';\nimport { PostgrestClient } from '@supabase/postgrest-js';\nimport { RealtimeClient } from '@supabase/realtime-js';\nimport { StorageClient as SupabaseStorageClient } from '@supabase/storage-js';\nimport { DEFAULT_HEADERS } from './lib/constants';\nimport { fetchWithAuth } from './lib/fetch';\nimport { stripTrailingSlash, applySettingDefaults } from './lib/helpers';\nimport { SupabaseAuthClient } from './lib/SupabaseAuthClient';\nvar DEFAULT_GLOBAL_OPTIONS = {\n  headers: DEFAULT_HEADERS\n};\nvar DEFAULT_DB_OPTIONS = {\n  schema: 'public'\n};\nvar DEFAULT_AUTH_OPTIONS = {\n  autoRefreshToken: true,\n  persistSession: true,\n  detectSessionInUrl: true,\n  flowType: 'implicit'\n};\nvar DEFAULT_REALTIME_OPTIONS = {};\n/**\r\n * Supabase Client.\r\n *\r\n * An isomorphic Javascript client for interacting with Postgres.\r\n */\n\nvar SupabaseClient = /*#__PURE__*/function () {\n  /**\r\n   * Create a new client for use in the browser.\r\n   * @param supabaseUrl The unique Supabase URL which is supplied when you create a new project in your project dashboard.\r\n   * @param supabaseKey The unique Supabase Key which is supplied when you create a new project in your project dashboard.\r\n   * @param options.db.schema You can switch in between schemas. The schema needs to be on the list of exposed schemas inside Supabase.\r\n   * @param options.auth.autoRefreshToken Set to \"true\" if you want to automatically refresh the token before expiring.\r\n   * @param options.auth.persistSession Set to \"true\" if you want to automatically save the user session into local storage.\r\n   * @param options.auth.detectSessionInUrl Set to \"true\" if you want to automatically detects OAuth grants in the URL and signs in the user.\r\n   * @param options.realtime Options passed along to realtime-js constructor.\r\n   * @param options.global.fetch A custom fetch implementation.\r\n   * @param options.global.headers Any additional headers to send with each network request.\r\n   */\n  function SupabaseClient(supabaseUrl, supabaseKey, options) {\n    _classCallCheck(this, SupabaseClient);\n\n    var _a, _b, _c, _d, _e, _f, _g, _h;\n\n    this.supabaseUrl = supabaseUrl;\n    this.supabaseKey = supabaseKey;\n    if (!supabaseUrl) throw new Error('supabaseUrl is required.');\n    if (!supabaseKey) throw new Error('supabaseKey is required.');\n\n    var _supabaseUrl = stripTrailingSlash(supabaseUrl);\n\n    this.realtimeUrl = \"\".concat(_supabaseUrl, \"/realtime/v1\").replace(/^http/i, 'ws');\n    this.authUrl = \"\".concat(_supabaseUrl, \"/auth/v1\");\n    this.storageUrl = \"\".concat(_supabaseUrl, \"/storage/v1\");\n\n    var isPlatform = _supabaseUrl.match(/(supabase\\.co)|(supabase\\.in)/);\n\n    if (isPlatform) {\n      var urlParts = _supabaseUrl.split('.');\n\n      this.functionsUrl = \"\".concat(urlParts[0], \".functions.\").concat(urlParts[1], \".\").concat(urlParts[2]);\n    } else {\n      this.functionsUrl = \"\".concat(_supabaseUrl, \"/functions/v1\");\n    } // default storage key uses the supabase project ref as a namespace\n\n\n    var defaultStorageKey = \"sb-\".concat(new URL(this.authUrl).hostname.split('.')[0], \"-auth-token\");\n    var DEFAULTS = {\n      db: DEFAULT_DB_OPTIONS,\n      realtime: DEFAULT_REALTIME_OPTIONS,\n      auth: Object.assign(Object.assign({}, DEFAULT_AUTH_OPTIONS), {\n        storageKey: defaultStorageKey\n      }),\n      global: DEFAULT_GLOBAL_OPTIONS\n    };\n    var settings = applySettingDefaults(options !== null && options !== void 0 ? options : {}, DEFAULTS);\n    this.storageKey = (_b = (_a = settings.auth) === null || _a === void 0 ? void 0 : _a.storageKey) !== null && _b !== void 0 ? _b : '';\n    this.headers = (_d = (_c = settings.global) === null || _c === void 0 ? void 0 : _c.headers) !== null && _d !== void 0 ? _d : {};\n    this.auth = this._initSupabaseAuthClient((_e = settings.auth) !== null && _e !== void 0 ? _e : {}, this.headers, (_f = settings.global) === null || _f === void 0 ? void 0 : _f.fetch);\n    this.fetch = fetchWithAuth(supabaseKey, this._getAccessToken.bind(this), (_g = settings.global) === null || _g === void 0 ? void 0 : _g.fetch);\n    this.realtime = this._initRealtimeClient(Object.assign({\n      headers: this.headers\n    }, settings.realtime));\n    this.rest = new PostgrestClient(\"\".concat(_supabaseUrl, \"/rest/v1\"), {\n      headers: this.headers,\n      schema: (_h = settings.db) === null || _h === void 0 ? void 0 : _h.schema,\n      fetch: this.fetch\n    });\n\n    this._listenForAuthEvents();\n  }\n  /**\r\n   * Supabase Functions allows you to deploy and invoke edge functions.\r\n   */\n\n\n  _createClass(SupabaseClient, [{\n    key: \"functions\",\n    get: function get() {\n      return new FunctionsClient(this.functionsUrl, {\n        headers: this.headers,\n        customFetch: this.fetch\n      });\n    }\n    /**\r\n     * Supabase Storage allows you to manage user-generated content, such as photos or videos.\r\n     */\n\n  }, {\n    key: \"storage\",\n    get: function get() {\n      return new SupabaseStorageClient(this.storageUrl, this.headers, this.fetch);\n    }\n  }, {\n    key: \"from\",\n    value: function from(relation) {\n      return this.rest.from(relation);\n    }\n    /**\r\n     * Perform a function call.\r\n     *\r\n     * @param fn  The function name to call.\r\n     * @param args  The parameters to pass to the function call.\r\n     * @param options.head   When set to true, no data will be returned.\r\n     * @param options.count  Count algorithm to use to count rows in a table.\r\n     *\r\n     */\n\n  }, {\n    key: \"rpc\",\n    value: function rpc(fn) {\n      var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var options = arguments.length > 2 ? arguments[2] : undefined;\n      return this.rest.rpc(fn, args, options);\n    }\n    /**\r\n     * Creates a Realtime channel with Broadcast, Presence, and Postgres Changes.\r\n     *\r\n     * @param {string} name - The name of the Realtime channel.\r\n     * @param {Object} opts - The options to pass to the Realtime channel.\r\n     *\r\n     */\n\n  }, {\n    key: \"channel\",\n    value: function channel(name) {\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n        config: {}\n      };\n      return this.realtime.channel(name, opts);\n    }\n    /**\r\n     * Returns all Realtime channels.\r\n     */\n\n  }, {\n    key: \"getChannels\",\n    value: function getChannels() {\n      return this.realtime.getChannels();\n    }\n    /**\r\n     * Unsubscribes and removes Realtime channel from Realtime client.\r\n     *\r\n     * @param {RealtimeChannel} channel - The name of the Realtime channel.\r\n     *\r\n     */\n\n  }, {\n    key: \"removeChannel\",\n    value: function removeChannel(channel) {\n      return this.realtime.removeChannel(channel);\n    }\n    /**\r\n     * Unsubscribes and removes all Realtime channels from Realtime client.\r\n     */\n\n  }, {\n    key: \"removeAllChannels\",\n    value: function removeAllChannels() {\n      return this.realtime.removeAllChannels();\n    }\n  }, {\n    key: \"_getAccessToken\",\n    value: function _getAccessToken() {\n      var _a, _b;\n\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var _yield$this$auth$getS, data;\n\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.auth.getSession();\n\n              case 2:\n                _yield$this$auth$getS = _context.sent;\n                data = _yield$this$auth$getS.data;\n                return _context.abrupt(\"return\", (_b = (_a = data.session) === null || _a === void 0 ? void 0 : _a.access_token) !== null && _b !== void 0 ? _b : null);\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n  }, {\n    key: \"_initSupabaseAuthClient\",\n    value: function _initSupabaseAuthClient(_ref, headers, fetch) {\n      var autoRefreshToken = _ref.autoRefreshToken,\n          persistSession = _ref.persistSession,\n          detectSessionInUrl = _ref.detectSessionInUrl,\n          storage = _ref.storage,\n          storageKey = _ref.storageKey,\n          flowType = _ref.flowType;\n      var authHeaders = {\n        Authorization: \"Bearer \".concat(this.supabaseKey),\n        apikey: \"\".concat(this.supabaseKey)\n      };\n      return new SupabaseAuthClient({\n        url: this.authUrl,\n        headers: Object.assign(Object.assign({}, authHeaders), headers),\n        storageKey: storageKey,\n        autoRefreshToken: autoRefreshToken,\n        persistSession: persistSession,\n        detectSessionInUrl: detectSessionInUrl,\n        storage: storage,\n        flowType: flowType,\n        fetch: fetch\n      });\n    }\n  }, {\n    key: \"_initRealtimeClient\",\n    value: function _initRealtimeClient(options) {\n      return new RealtimeClient(this.realtimeUrl, Object.assign(Object.assign({}, options), {\n        params: Object.assign({\n          apikey: this.supabaseKey\n        }, options === null || options === void 0 ? void 0 : options.params)\n      }));\n    }\n  }, {\n    key: \"_listenForAuthEvents\",\n    value: function _listenForAuthEvents() {\n      var _this = this;\n\n      var data = this.auth.onAuthStateChange(function (event, session) {\n        _this._handleTokenChanged(event, session === null || session === void 0 ? void 0 : session.access_token, 'CLIENT');\n      });\n      return data;\n    }\n  }, {\n    key: \"_handleTokenChanged\",\n    value: function _handleTokenChanged(event, token, source) {\n      if ((event === 'TOKEN_REFRESHED' || event === 'SIGNED_IN') && this.changedAccessToken !== token) {\n        // Token has changed\n        this.realtime.setAuth(token !== null && token !== void 0 ? token : null);\n        this.changedAccessToken = token;\n      } else if (event === 'SIGNED_OUT') {\n        // Token is removed\n        this.realtime.setAuth(this.supabaseKey);\n        if (source == 'STORAGE') this.auth.signOut();\n        this.changedAccessToken = undefined;\n      }\n    }\n  }]);\n\n  return SupabaseClient;\n}();\n\nexport { SupabaseClient as default };","map":{"version":3,"mappings":"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","names":["FunctionsClient","PostgrestClient","RealtimeClient","StorageClient","SupabaseStorageClient","DEFAULT_HEADERS","fetchWithAuth","stripTrailingSlash","applySettingDefaults","SupabaseAuthClient","DEFAULT_GLOBAL_OPTIONS","headers","DEFAULT_DB_OPTIONS","schema","DEFAULT_AUTH_OPTIONS","autoRefreshToken","persistSession","detectSessionInUrl","flowType","DEFAULT_REALTIME_OPTIONS","SupabaseClient","supabaseUrl","supabaseKey","options","Error","_supabaseUrl","realtimeUrl","replace","authUrl","storageUrl","isPlatform","match","urlParts","split","functionsUrl","defaultStorageKey","URL","hostname","DEFAULTS","db","realtime","auth","storageKey","global","settings","_a","_b","_c","_d","_initSupabaseAuthClient","_e","_f","fetch","_getAccessToken","bind","_g","_initRealtimeClient","Object","rest","_h","_listenForAuthEvents","customFetch","relation","from","fn","args","rpc","name","opts","config","channel","getChannels","removeChannel","removeAllChannels","getSession","data","session","access_token","storage","authHeaders","Authorization","apikey","url","params","onAuthStateChange","event","_handleTokenChanged","token","source","changedAccessToken","setAuth","signOut","undefined"],"sources":["C:\\Users\\mumta\\crewmates\\client\\node_modules\\@supabase\\supabase-js\\src\\SupabaseClient.ts"],"sourcesContent":["import { FunctionsClient } from '@supabase/functions-js'\r\nimport { AuthChangeEvent } from '@supabase/gotrue-js'\r\nimport {\r\n  PostgrestClient,\r\n  PostgrestFilterBuilder,\r\n  PostgrestQueryBuilder,\r\n} from '@supabase/postgrest-js'\r\nimport {\r\n  RealtimeChannel,\r\n  RealtimeChannelOptions,\r\n  RealtimeClient,\r\n  RealtimeClientOptions,\r\n} from '@supabase/realtime-js'\r\nimport { StorageClient as SupabaseStorageClient } from '@supabase/storage-js'\r\nimport { DEFAULT_HEADERS } from './lib/constants'\r\nimport { fetchWithAuth } from './lib/fetch'\r\nimport { stripTrailingSlash, applySettingDefaults } from './lib/helpers'\r\nimport { SupabaseAuthClient } from './lib/SupabaseAuthClient'\r\nimport { Fetch, GenericSchema, SupabaseClientOptions, SupabaseAuthClientOptions } from './lib/types'\r\n\r\nconst DEFAULT_GLOBAL_OPTIONS = {\r\n  headers: DEFAULT_HEADERS,\r\n}\r\n\r\nconst DEFAULT_DB_OPTIONS = {\r\n  schema: 'public',\r\n}\r\n\r\nconst DEFAULT_AUTH_OPTIONS: SupabaseAuthClientOptions = {\r\n  autoRefreshToken: true,\r\n  persistSession: true,\r\n  detectSessionInUrl: true,\r\n  flowType: 'implicit',\r\n}\r\n\r\nconst DEFAULT_REALTIME_OPTIONS: RealtimeClientOptions = {}\r\n\r\n/**\r\n * Supabase Client.\r\n *\r\n * An isomorphic Javascript client for interacting with Postgres.\r\n */\r\nexport default class SupabaseClient<\r\n  Database = any,\r\n  SchemaName extends string & keyof Database = 'public' extends keyof Database\r\n    ? 'public'\r\n    : string & keyof Database,\r\n  Schema extends GenericSchema = Database[SchemaName] extends GenericSchema\r\n    ? Database[SchemaName]\r\n    : any\r\n> {\r\n  /**\r\n   * Supabase Auth allows you to create and manage user sessions for access to data that is secured by access policies.\r\n   */\r\n  auth: SupabaseAuthClient\r\n  realtime: RealtimeClient\r\n\r\n  protected realtimeUrl: string\r\n  protected authUrl: string\r\n  protected storageUrl: string\r\n  protected functionsUrl: string\r\n  protected rest: PostgrestClient<Database, SchemaName>\r\n  protected storageKey: string\r\n  protected fetch?: Fetch\r\n  protected changedAccessToken: string | undefined\r\n\r\n  protected headers: {\r\n    [key: string]: string\r\n  }\r\n\r\n  /**\r\n   * Create a new client for use in the browser.\r\n   * @param supabaseUrl The unique Supabase URL which is supplied when you create a new project in your project dashboard.\r\n   * @param supabaseKey The unique Supabase Key which is supplied when you create a new project in your project dashboard.\r\n   * @param options.db.schema You can switch in between schemas. The schema needs to be on the list of exposed schemas inside Supabase.\r\n   * @param options.auth.autoRefreshToken Set to \"true\" if you want to automatically refresh the token before expiring.\r\n   * @param options.auth.persistSession Set to \"true\" if you want to automatically save the user session into local storage.\r\n   * @param options.auth.detectSessionInUrl Set to \"true\" if you want to automatically detects OAuth grants in the URL and signs in the user.\r\n   * @param options.realtime Options passed along to realtime-js constructor.\r\n   * @param options.global.fetch A custom fetch implementation.\r\n   * @param options.global.headers Any additional headers to send with each network request.\r\n   */\r\n  constructor(\r\n    protected supabaseUrl: string,\r\n    protected supabaseKey: string,\r\n    options?: SupabaseClientOptions<SchemaName>\r\n  ) {\r\n    if (!supabaseUrl) throw new Error('supabaseUrl is required.')\r\n    if (!supabaseKey) throw new Error('supabaseKey is required.')\r\n\r\n    const _supabaseUrl = stripTrailingSlash(supabaseUrl)\r\n\r\n    this.realtimeUrl = `${_supabaseUrl}/realtime/v1`.replace(/^http/i, 'ws')\r\n    this.authUrl = `${_supabaseUrl}/auth/v1`\r\n    this.storageUrl = `${_supabaseUrl}/storage/v1`\r\n\r\n    const isPlatform = _supabaseUrl.match(/(supabase\\.co)|(supabase\\.in)/)\r\n    if (isPlatform) {\r\n      const urlParts = _supabaseUrl.split('.')\r\n      this.functionsUrl = `${urlParts[0]}.functions.${urlParts[1]}.${urlParts[2]}`\r\n    } else {\r\n      this.functionsUrl = `${_supabaseUrl}/functions/v1`\r\n    }\r\n    // default storage key uses the supabase project ref as a namespace\r\n    const defaultStorageKey = `sb-${new URL(this.authUrl).hostname.split('.')[0]}-auth-token`\r\n    const DEFAULTS = {\r\n      db: DEFAULT_DB_OPTIONS,\r\n      realtime: DEFAULT_REALTIME_OPTIONS,\r\n      auth: { ...DEFAULT_AUTH_OPTIONS, storageKey: defaultStorageKey },\r\n      global: DEFAULT_GLOBAL_OPTIONS,\r\n    }\r\n\r\n    const settings = applySettingDefaults(options ?? {}, DEFAULTS)\r\n\r\n    this.storageKey = settings.auth?.storageKey ?? ''\r\n    this.headers = settings.global?.headers ?? {}\r\n\r\n    this.auth = this._initSupabaseAuthClient(\r\n      settings.auth ?? {},\r\n      this.headers,\r\n      settings.global?.fetch\r\n    )\r\n    this.fetch = fetchWithAuth(supabaseKey, this._getAccessToken.bind(this), settings.global?.fetch)\r\n\r\n    this.realtime = this._initRealtimeClient({ headers: this.headers, ...settings.realtime })\r\n    this.rest = new PostgrestClient(`${_supabaseUrl}/rest/v1`, {\r\n      headers: this.headers,\r\n      schema: settings.db?.schema,\r\n      fetch: this.fetch,\r\n    })\r\n\r\n    this._listenForAuthEvents()\r\n  }\r\n\r\n  /**\r\n   * Supabase Functions allows you to deploy and invoke edge functions.\r\n   */\r\n  get functions() {\r\n    return new FunctionsClient(this.functionsUrl, {\r\n      headers: this.headers,\r\n      customFetch: this.fetch,\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Supabase Storage allows you to manage user-generated content, such as photos or videos.\r\n   */\r\n  get storage() {\r\n    return new SupabaseStorageClient(this.storageUrl, this.headers, this.fetch)\r\n  }\r\n\r\n  /**\r\n   * Perform a table operation.\r\n   *\r\n   * @param table The table name to operate on.\r\n   */\r\n  from<\r\n    TableName extends string & keyof Schema['Tables'],\r\n    Table extends Schema['Tables'][TableName]\r\n  >(relation: TableName): PostgrestQueryBuilder<Schema, Table>\r\n  from<ViewName extends string & keyof Schema['Views'], View extends Schema['Views'][ViewName]>(\r\n    relation: ViewName\r\n  ): PostgrestQueryBuilder<Schema, View>\r\n  from(relation: string): PostgrestQueryBuilder<Schema, any>\r\n  from(relation: string): PostgrestQueryBuilder<Schema, any> {\r\n    return this.rest.from(relation)\r\n  }\r\n\r\n  /**\r\n   * Perform a function call.\r\n   *\r\n   * @param fn  The function name to call.\r\n   * @param args  The parameters to pass to the function call.\r\n   * @param options.head   When set to true, no data will be returned.\r\n   * @param options.count  Count algorithm to use to count rows in a table.\r\n   *\r\n   */\r\n  rpc<\r\n    FunctionName extends string & keyof Schema['Functions'],\r\n    Function_ extends Schema['Functions'][FunctionName]\r\n  >(\r\n    fn: FunctionName,\r\n    args: Function_['Args'] = {},\r\n    options?: {\r\n      head?: boolean\r\n      count?: 'exact' | 'planned' | 'estimated'\r\n    }\r\n  ): PostgrestFilterBuilder<\r\n    Schema,\r\n    Function_['Returns'] extends any[]\r\n      ? Function_['Returns'][number] extends Record<string, unknown>\r\n        ? Function_['Returns'][number]\r\n        : never\r\n      : never,\r\n    Function_['Returns']\r\n  > {\r\n    return this.rest.rpc(fn, args, options)\r\n  }\r\n\r\n  /**\r\n   * Creates a Realtime channel with Broadcast, Presence, and Postgres Changes.\r\n   *\r\n   * @param {string} name - The name of the Realtime channel.\r\n   * @param {Object} opts - The options to pass to the Realtime channel.\r\n   *\r\n   */\r\n  channel(name: string, opts: RealtimeChannelOptions = { config: {} }): RealtimeChannel {\r\n    return this.realtime.channel(name, opts)\r\n  }\r\n\r\n  /**\r\n   * Returns all Realtime channels.\r\n   */\r\n  getChannels(): RealtimeChannel[] {\r\n    return this.realtime.getChannels()\r\n  }\r\n\r\n  /**\r\n   * Unsubscribes and removes Realtime channel from Realtime client.\r\n   *\r\n   * @param {RealtimeChannel} channel - The name of the Realtime channel.\r\n   *\r\n   */\r\n  removeChannel(channel: RealtimeChannel): Promise<'ok' | 'timed out' | 'error'> {\r\n    return this.realtime.removeChannel(channel)\r\n  }\r\n\r\n  /**\r\n   * Unsubscribes and removes all Realtime channels from Realtime client.\r\n   */\r\n  removeAllChannels(): Promise<('ok' | 'timed out' | 'error')[]> {\r\n    return this.realtime.removeAllChannels()\r\n  }\r\n\r\n  private async _getAccessToken() {\r\n    const { data } = await this.auth.getSession()\r\n\r\n    return data.session?.access_token ?? null\r\n  }\r\n\r\n  private _initSupabaseAuthClient(\r\n    {\r\n      autoRefreshToken,\r\n      persistSession,\r\n      detectSessionInUrl,\r\n      storage,\r\n      storageKey,\r\n      flowType,\r\n    }: SupabaseAuthClientOptions,\r\n    headers?: Record<string, string>,\r\n    fetch?: Fetch\r\n  ) {\r\n    const authHeaders = {\r\n      Authorization: `Bearer ${this.supabaseKey}`,\r\n      apikey: `${this.supabaseKey}`,\r\n    }\r\n    return new SupabaseAuthClient({\r\n      url: this.authUrl,\r\n      headers: { ...authHeaders, ...headers },\r\n      storageKey: storageKey,\r\n      autoRefreshToken,\r\n      persistSession,\r\n      detectSessionInUrl,\r\n      storage,\r\n      flowType,\r\n      fetch,\r\n    })\r\n  }\r\n\r\n  private _initRealtimeClient(options: RealtimeClientOptions) {\r\n    return new RealtimeClient(this.realtimeUrl, {\r\n      ...options,\r\n      params: { ...{ apikey: this.supabaseKey }, ...options?.params },\r\n    })\r\n  }\r\n\r\n  private _listenForAuthEvents() {\r\n    let data = this.auth.onAuthStateChange((event, session) => {\r\n      this._handleTokenChanged(event, session?.access_token, 'CLIENT')\r\n    })\r\n    return data\r\n  }\r\n\r\n  private _handleTokenChanged(\r\n    event: AuthChangeEvent,\r\n    token: string | undefined,\r\n    source: 'CLIENT' | 'STORAGE'\r\n  ) {\r\n    if (\r\n      (event === 'TOKEN_REFRESHED' || event === 'SIGNED_IN') &&\r\n      this.changedAccessToken !== token\r\n    ) {\r\n      // Token has changed\r\n      this.realtime.setAuth(token ?? null)\r\n\r\n      this.changedAccessToken = token\r\n    } else if (event === 'SIGNED_OUT') {\r\n      // Token is removed\r\n      this.realtime.setAuth(this.supabaseKey)\r\n      if (source == 'STORAGE') this.auth.signOut()\r\n      this.changedAccessToken = undefined\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}