{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/mumta/crewmates/client/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _classCallCheck from \"C:/Users/mumta/crewmates/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/mumta/crewmates/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { isStorageError, StorageError } from '../lib/errors';\nimport { get, post, remove as _remove } from '../lib/fetch';\nimport { resolveFetch } from '../lib/helpers';\nvar DEFAULT_SEARCH_OPTIONS = {\n  limit: 100,\n  offset: 0,\n  sortBy: {\n    column: 'name',\n    order: 'asc'\n  }\n};\nvar DEFAULT_FILE_OPTIONS = {\n  cacheControl: '3600',\n  contentType: 'text/plain;charset=UTF-8',\n  upsert: false\n};\n\nvar StorageFileApi = /*#__PURE__*/function () {\n  function StorageFileApi(url) {\n    var headers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var bucketId = arguments.length > 2 ? arguments[2] : undefined;\n    var fetch = arguments.length > 3 ? arguments[3] : undefined;\n\n    _classCallCheck(this, StorageFileApi);\n\n    this.url = url;\n    this.headers = headers;\n    this.bucketId = bucketId;\n    this.fetch = resolveFetch(fetch);\n  }\n  /**\r\n   * Uploads a file to an existing bucket or replaces an existing file at the specified path with a new one.\r\n   *\r\n   * @param method HTTP method.\r\n   * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\r\n   * @param fileBody The body of the file to be stored in the bucket.\r\n   */\n\n\n  _createClass(StorageFileApi, [{\n    key: \"uploadOrUpdate\",\n    value: function uploadOrUpdate(method, path, fileBody, fileOptions) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var body, options, headers, cleanPath, _path, res, error;\n\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                options = Object.assign(Object.assign({}, DEFAULT_FILE_OPTIONS), fileOptions);\n                headers = Object.assign(Object.assign({}, this.headers), method === 'POST' && {\n                  'x-upsert': String(options.upsert)\n                });\n\n                if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\n                  body = new FormData();\n                  body.append('cacheControl', options.cacheControl);\n                  body.append('', fileBody);\n                } else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\n                  body = fileBody;\n                  body.append('cacheControl', options.cacheControl);\n                } else {\n                  body = fileBody;\n                  headers['cache-control'] = \"max-age=\".concat(options.cacheControl);\n                  headers['content-type'] = options.contentType;\n                }\n\n                cleanPath = this._removeEmptyFolders(path);\n                _path = this._getFinalPath(cleanPath);\n                _context.next = 8;\n                return this.fetch(\"\".concat(this.url, \"/object/\").concat(_path), Object.assign({\n                  method: method,\n                  body: body,\n                  headers: headers\n                }, (options === null || options === void 0 ? void 0 : options.duplex) ? {\n                  duplex: options.duplex\n                } : {}));\n\n              case 8:\n                res = _context.sent;\n\n                if (!res.ok) {\n                  _context.next = 13;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", {\n                  data: {\n                    path: cleanPath\n                  },\n                  error: null\n                });\n\n              case 13:\n                _context.next = 15;\n                return res.json();\n\n              case 15:\n                error = _context.sent;\n                return _context.abrupt(\"return\", {\n                  data: null,\n                  error: error\n                });\n\n              case 17:\n                _context.next = 24;\n                break;\n\n              case 19:\n                _context.prev = 19;\n                _context.t0 = _context[\"catch\"](0);\n\n                if (!isStorageError(_context.t0)) {\n                  _context.next = 23;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", {\n                  data: null,\n                  error: _context.t0\n                });\n\n              case 23:\n                throw _context.t0;\n\n              case 24:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 19]]);\n      }));\n    }\n    /**\r\n     * Uploads a file to an existing bucket.\r\n     *\r\n     * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\r\n     * @param fileBody The body of the file to be stored in the bucket.\r\n     */\n\n  }, {\n    key: \"upload\",\n    value: function upload(path, fileBody, fileOptions) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", this.uploadOrUpdate('POST', path, fileBody, fileOptions));\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    }\n    /**\r\n     * Upload a file with a token generated from `createUploadSignedUrl`.\r\n     * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\r\n     * @param token The token generated from `createUploadSignedUrl`\r\n     * @param fileBody The body of the file to be stored in the bucket.\r\n     */\n\n  }, {\n    key: \"uploadToSignedUrl\",\n    value: function uploadToSignedUrl(path, token, fileBody, fileOptions) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var cleanPath, _path, url, body, options, headers, res, error;\n\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                cleanPath = this._removeEmptyFolders(path);\n                _path = this._getFinalPath(cleanPath);\n                url = new URL(this.url + \"/object/upload/sign/\".concat(_path));\n                url.searchParams.set('token', token);\n                _context3.prev = 4;\n                options = Object.assign({\n                  upsert: DEFAULT_FILE_OPTIONS.upsert\n                }, fileOptions);\n                headers = Object.assign(Object.assign({}, this.headers), {\n                  'x-upsert': String(options.upsert)\n                });\n\n                if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\n                  body = new FormData();\n                  body.append('cacheControl', options.cacheControl);\n                  body.append('', fileBody);\n                } else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\n                  body = fileBody;\n                  body.append('cacheControl', options.cacheControl);\n                } else {\n                  body = fileBody;\n                  headers['cache-control'] = \"max-age=\".concat(options.cacheControl);\n                  headers['content-type'] = options.contentType;\n                }\n\n                _context3.next = 10;\n                return this.fetch(url.toString(), {\n                  method: 'PUT',\n                  body: body,\n                  headers: headers\n                });\n\n              case 10:\n                res = _context3.sent;\n\n                if (!res.ok) {\n                  _context3.next = 15;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", {\n                  data: {\n                    path: cleanPath\n                  },\n                  error: null\n                });\n\n              case 15:\n                _context3.next = 17;\n                return res.json();\n\n              case 17:\n                error = _context3.sent;\n                return _context3.abrupt(\"return\", {\n                  data: null,\n                  error: error\n                });\n\n              case 19:\n                _context3.next = 26;\n                break;\n\n              case 21:\n                _context3.prev = 21;\n                _context3.t0 = _context3[\"catch\"](4);\n\n                if (!isStorageError(_context3.t0)) {\n                  _context3.next = 25;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", {\n                  data: null,\n                  error: _context3.t0\n                });\n\n              case 25:\n                throw _context3.t0;\n\n              case 26:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[4, 21]]);\n      }));\n    }\n    /**\r\n     * Creates a signed upload URL.\r\n     * Signed upload URLs can be used upload files to the bucket without further authentication.\r\n     * They are valid for one minute.\r\n     * @param path The file path, including the current file name. For example `folder/image.png`.\r\n     */\n\n  }, {\n    key: \"createSignedUploadUrl\",\n    value: function createSignedUploadUrl(path) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var _path, data, url, token;\n\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.prev = 0;\n                _path = this._getFinalPath(path);\n                _context4.next = 4;\n                return post(this.fetch, \"\".concat(this.url, \"/object/upload/sign/\").concat(_path), {}, {\n                  headers: this.headers\n                });\n\n              case 4:\n                data = _context4.sent;\n                url = new URL(this.url + data.url);\n                token = url.searchParams.get('token');\n\n                if (token) {\n                  _context4.next = 9;\n                  break;\n                }\n\n                throw new StorageError('No token returned by API');\n\n              case 9:\n                return _context4.abrupt(\"return\", {\n                  data: {\n                    signedUrl: url.toString(),\n                    path: path,\n                    token: token\n                  },\n                  error: null\n                });\n\n              case 12:\n                _context4.prev = 12;\n                _context4.t0 = _context4[\"catch\"](0);\n\n                if (!isStorageError(_context4.t0)) {\n                  _context4.next = 16;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", {\n                  data: null,\n                  error: _context4.t0\n                });\n\n              case 16:\n                throw _context4.t0;\n\n              case 17:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[0, 12]]);\n      }));\n    }\n    /**\r\n     * Replaces an existing file at the specified path with a new one.\r\n     *\r\n     * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to update.\r\n     * @param fileBody The body of the file to be stored in the bucket.\r\n     */\n\n  }, {\n    key: \"update\",\n    value: function update(path, fileBody, fileOptions) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                return _context5.abrupt(\"return\", this.uploadOrUpdate('PUT', path, fileBody, fileOptions));\n\n              case 1:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n    }\n    /**\r\n     * Moves an existing file to a new path in the same bucket.\r\n     *\r\n     * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\r\n     * @param toPath The new file path, including the new file name. For example `folder/image-new.png`.\r\n     */\n\n  }, {\n    key: \"move\",\n    value: function move(fromPath, toPath) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n        var data;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.prev = 0;\n                _context6.next = 3;\n                return post(this.fetch, \"\".concat(this.url, \"/object/move\"), {\n                  bucketId: this.bucketId,\n                  sourceKey: fromPath,\n                  destinationKey: toPath\n                }, {\n                  headers: this.headers\n                });\n\n              case 3:\n                data = _context6.sent;\n                return _context6.abrupt(\"return\", {\n                  data: data,\n                  error: null\n                });\n\n              case 7:\n                _context6.prev = 7;\n                _context6.t0 = _context6[\"catch\"](0);\n\n                if (!isStorageError(_context6.t0)) {\n                  _context6.next = 11;\n                  break;\n                }\n\n                return _context6.abrupt(\"return\", {\n                  data: null,\n                  error: _context6.t0\n                });\n\n              case 11:\n                throw _context6.t0;\n\n              case 12:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this, [[0, 7]]);\n      }));\n    }\n    /**\r\n     * Copies an existing file to a new path in the same bucket.\r\n     *\r\n     * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\r\n     * @param toPath The new file path, including the new file name. For example `folder/image-copy.png`.\r\n     */\n\n  }, {\n    key: \"copy\",\n    value: function copy(fromPath, toPath) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n        var data;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.prev = 0;\n                _context7.next = 3;\n                return post(this.fetch, \"\".concat(this.url, \"/object/copy\"), {\n                  bucketId: this.bucketId,\n                  sourceKey: fromPath,\n                  destinationKey: toPath\n                }, {\n                  headers: this.headers\n                });\n\n              case 3:\n                data = _context7.sent;\n                return _context7.abrupt(\"return\", {\n                  data: {\n                    path: data.Key\n                  },\n                  error: null\n                });\n\n              case 7:\n                _context7.prev = 7;\n                _context7.t0 = _context7[\"catch\"](0);\n\n                if (!isStorageError(_context7.t0)) {\n                  _context7.next = 11;\n                  break;\n                }\n\n                return _context7.abrupt(\"return\", {\n                  data: null,\n                  error: _context7.t0\n                });\n\n              case 11:\n                throw _context7.t0;\n\n              case 12:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this, [[0, 7]]);\n      }));\n    }\n    /**\r\n     * Creates a signed URL. Use a signed URL to share a file for a fixed amount of time.\r\n     *\r\n     * @param path The file path, including the current file name. For example `folder/image.png`.\r\n     * @param expiresIn The number of seconds until the signed URL expires. For example, `60` for a URL which is valid for one minute.\r\n     * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\r\n     * @param options.transform Transform the asset before serving it to the client.\r\n     */\n\n  }, {\n    key: \"createSignedUrl\",\n    value: function createSignedUrl(path, expiresIn, options) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {\n        var _path, data, downloadQueryParam, signedUrl;\n\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.prev = 0;\n                _path = this._getFinalPath(path);\n                _context8.next = 4;\n                return post(this.fetch, \"\".concat(this.url, \"/object/sign/\").concat(_path), Object.assign({\n                  expiresIn: expiresIn\n                }, (options === null || options === void 0 ? void 0 : options.transform) ? {\n                  transform: options.transform\n                } : {}), {\n                  headers: this.headers\n                });\n\n              case 4:\n                data = _context8.sent;\n                downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download) ? \"&download=\".concat(options.download === true ? '' : options.download) : '';\n                signedUrl = encodeURI(\"\".concat(this.url).concat(data.signedURL).concat(downloadQueryParam));\n                data = {\n                  signedUrl: signedUrl\n                };\n                return _context8.abrupt(\"return\", {\n                  data: data,\n                  error: null\n                });\n\n              case 11:\n                _context8.prev = 11;\n                _context8.t0 = _context8[\"catch\"](0);\n\n                if (!isStorageError(_context8.t0)) {\n                  _context8.next = 15;\n                  break;\n                }\n\n                return _context8.abrupt(\"return\", {\n                  data: null,\n                  error: _context8.t0\n                });\n\n              case 15:\n                throw _context8.t0;\n\n              case 16:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this, [[0, 11]]);\n      }));\n    }\n    /**\r\n     * Creates multiple signed URLs. Use a signed URL to share a file for a fixed amount of time.\r\n     *\r\n     * @param paths The file paths to be downloaded, including the current file names. For example `['folder/image.png', 'folder2/image2.png']`.\r\n     * @param expiresIn The number of seconds until the signed URLs expire. For example, `60` for URLs which are valid for one minute.\r\n     * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\r\n     */\n\n  }, {\n    key: \"createSignedUrls\",\n    value: function createSignedUrls(paths, expiresIn, options) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {\n        var _this = this;\n\n        var data, downloadQueryParam;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                _context9.prev = 0;\n                _context9.next = 3;\n                return post(this.fetch, \"\".concat(this.url, \"/object/sign/\").concat(this.bucketId), {\n                  expiresIn: expiresIn,\n                  paths: paths\n                }, {\n                  headers: this.headers\n                });\n\n              case 3:\n                data = _context9.sent;\n                downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download) ? \"&download=\".concat(options.download === true ? '' : options.download) : '';\n                return _context9.abrupt(\"return\", {\n                  data: data.map(function (datum) {\n                    return Object.assign(Object.assign({}, datum), {\n                      signedUrl: datum.signedURL ? encodeURI(\"\".concat(_this.url).concat(datum.signedURL).concat(downloadQueryParam)) : null\n                    });\n                  }),\n                  error: null\n                });\n\n              case 8:\n                _context9.prev = 8;\n                _context9.t0 = _context9[\"catch\"](0);\n\n                if (!isStorageError(_context9.t0)) {\n                  _context9.next = 12;\n                  break;\n                }\n\n                return _context9.abrupt(\"return\", {\n                  data: null,\n                  error: _context9.t0\n                });\n\n              case 12:\n                throw _context9.t0;\n\n              case 13:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this, [[0, 8]]);\n      }));\n    }\n    /**\r\n     * Downloads a file from a private bucket. For public buckets, make a request to the URL returned from `getPublicUrl` instead.\r\n     *\r\n     * @param path The full path and file name of the file to be downloaded. For example `folder/image.png`.\r\n     * @param options.transform Transform the asset before serving it to the client.\r\n     */\n\n  }, {\n    key: \"download\",\n    value: function download(path, options) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {\n        var wantsTransformation, renderPath, transformationQuery, queryString, _path, res, data;\n\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                wantsTransformation = typeof (options === null || options === void 0 ? void 0 : options.transform) !== 'undefined';\n                renderPath = wantsTransformation ? 'render/image/authenticated' : 'object';\n                transformationQuery = this.transformOptsToQueryString((options === null || options === void 0 ? void 0 : options.transform) || {});\n                queryString = transformationQuery ? \"?\".concat(transformationQuery) : '';\n                _context10.prev = 4;\n                _path = this._getFinalPath(path);\n                _context10.next = 8;\n                return get(this.fetch, \"\".concat(this.url, \"/\").concat(renderPath, \"/\").concat(_path).concat(queryString), {\n                  headers: this.headers,\n                  noResolveJson: true\n                });\n\n              case 8:\n                res = _context10.sent;\n                _context10.next = 11;\n                return res.blob();\n\n              case 11:\n                data = _context10.sent;\n                return _context10.abrupt(\"return\", {\n                  data: data,\n                  error: null\n                });\n\n              case 15:\n                _context10.prev = 15;\n                _context10.t0 = _context10[\"catch\"](4);\n\n                if (!isStorageError(_context10.t0)) {\n                  _context10.next = 19;\n                  break;\n                }\n\n                return _context10.abrupt(\"return\", {\n                  data: null,\n                  error: _context10.t0\n                });\n\n              case 19:\n                throw _context10.t0;\n\n              case 20:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this, [[4, 15]]);\n      }));\n    }\n    /**\r\n     * A simple convenience function to get the URL for an asset in a public bucket. If you do not want to use this function, you can construct the public URL by concatenating the bucket URL with the path to the asset.\r\n     * This function does not verify if the bucket is public. If a public URL is created for a bucket which is not public, you will not be able to download the asset.\r\n     *\r\n     * @param path The path and name of the file to generate the public URL for. For example `folder/image.png`.\r\n     * @param options.download Triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\r\n     * @param options.transform Transform the asset before serving it to the client.\r\n     */\n\n  }, {\n    key: \"getPublicUrl\",\n    value: function getPublicUrl(path, options) {\n      var _path = this._getFinalPath(path);\n\n      var _queryString = [];\n      var downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download) ? \"download=\".concat(options.download === true ? '' : options.download) : '';\n\n      if (downloadQueryParam !== '') {\n        _queryString.push(downloadQueryParam);\n      }\n\n      var wantsTransformation = typeof (options === null || options === void 0 ? void 0 : options.transform) !== 'undefined';\n      var renderPath = wantsTransformation ? 'render/image' : 'object';\n      var transformationQuery = this.transformOptsToQueryString((options === null || options === void 0 ? void 0 : options.transform) || {});\n\n      if (transformationQuery !== '') {\n        _queryString.push(transformationQuery);\n      }\n\n      var queryString = _queryString.join('&');\n\n      if (queryString !== '') {\n        queryString = \"?\".concat(queryString);\n      }\n\n      return {\n        data: {\n          publicUrl: encodeURI(\"\".concat(this.url, \"/\").concat(renderPath, \"/public/\").concat(_path).concat(queryString))\n        }\n      };\n    }\n    /**\r\n     * Deletes files within the same bucket\r\n     *\r\n     * @param paths An array of files to delete, including the path and file name. For example [`'folder/image.png'`].\r\n     */\n\n  }, {\n    key: \"remove\",\n    value: function remove(paths) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {\n        var data;\n        return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                _context11.prev = 0;\n                _context11.next = 3;\n                return _remove(this.fetch, \"\".concat(this.url, \"/object/\").concat(this.bucketId), {\n                  prefixes: paths\n                }, {\n                  headers: this.headers\n                });\n\n              case 3:\n                data = _context11.sent;\n                return _context11.abrupt(\"return\", {\n                  data: data,\n                  error: null\n                });\n\n              case 7:\n                _context11.prev = 7;\n                _context11.t0 = _context11[\"catch\"](0);\n\n                if (!isStorageError(_context11.t0)) {\n                  _context11.next = 11;\n                  break;\n                }\n\n                return _context11.abrupt(\"return\", {\n                  data: null,\n                  error: _context11.t0\n                });\n\n              case 11:\n                throw _context11.t0;\n\n              case 12:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this, [[0, 7]]);\n      }));\n    }\n    /**\r\n     * Get file metadata\r\n     * @param id the file id to retrieve metadata\r\n     */\n    // async getMetadata(\n    //   id: string\n    // ): Promise<\n    //   | {\n    //       data: Metadata\n    //       error: null\n    //     }\n    //   | {\n    //       data: null\n    //       error: StorageError\n    //     }\n    // > {\n    //   try {\n    //     const data = await get(this.fetch, `${this.url}/metadata/${id}`, { headers: this.headers })\n    //     return { data, error: null }\n    //   } catch (error) {\n    //     if (isStorageError(error)) {\n    //       return { data: null, error }\n    //     }\n    //     throw error\n    //   }\n    // }\n\n    /**\r\n     * Update file metadata\r\n     * @param id the file id to update metadata\r\n     * @param meta the new file metadata\r\n     */\n    // async updateMetadata(\n    //   id: string,\n    //   meta: Metadata\n    // ): Promise<\n    //   | {\n    //       data: Metadata\n    //       error: null\n    //     }\n    //   | {\n    //       data: null\n    //       error: StorageError\n    //     }\n    // > {\n    //   try {\n    //     const data = await post(\n    //       this.fetch,\n    //       `${this.url}/metadata/${id}`,\n    //       { ...meta },\n    //       { headers: this.headers }\n    //     )\n    //     return { data, error: null }\n    //   } catch (error) {\n    //     if (isStorageError(error)) {\n    //       return { data: null, error }\n    //     }\n    //     throw error\n    //   }\n    // }\n\n    /**\r\n     * Lists all the files within a bucket.\r\n     * @param path The folder path.\r\n     */\n\n  }, {\n    key: \"list\",\n    value: function list(path, options, parameters) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee12() {\n        var body, data;\n        return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                _context12.prev = 0;\n                body = Object.assign(Object.assign(Object.assign({}, DEFAULT_SEARCH_OPTIONS), options), {\n                  prefix: path || ''\n                });\n                _context12.next = 4;\n                return post(this.fetch, \"\".concat(this.url, \"/object/list/\").concat(this.bucketId), body, {\n                  headers: this.headers\n                }, parameters);\n\n              case 4:\n                data = _context12.sent;\n                return _context12.abrupt(\"return\", {\n                  data: data,\n                  error: null\n                });\n\n              case 8:\n                _context12.prev = 8;\n                _context12.t0 = _context12[\"catch\"](0);\n\n                if (!isStorageError(_context12.t0)) {\n                  _context12.next = 12;\n                  break;\n                }\n\n                return _context12.abrupt(\"return\", {\n                  data: null,\n                  error: _context12.t0\n                });\n\n              case 12:\n                throw _context12.t0;\n\n              case 13:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this, [[0, 8]]);\n      }));\n    }\n  }, {\n    key: \"_getFinalPath\",\n    value: function _getFinalPath(path) {\n      return \"\".concat(this.bucketId, \"/\").concat(path);\n    }\n  }, {\n    key: \"_removeEmptyFolders\",\n    value: function _removeEmptyFolders(path) {\n      return path.replace(/^\\/|\\/$/g, '').replace(/\\/+/g, '/');\n    }\n  }, {\n    key: \"transformOptsToQueryString\",\n    value: function transformOptsToQueryString(transform) {\n      var params = [];\n\n      if (transform.width) {\n        params.push(\"width=\".concat(transform.width));\n      }\n\n      if (transform.height) {\n        params.push(\"height=\".concat(transform.height));\n      }\n\n      if (transform.resize) {\n        params.push(\"resize=\".concat(transform.resize));\n      }\n\n      if (transform.format) {\n        params.push(\"format=\".concat(transform.format));\n      }\n\n      if (transform.quality) {\n        params.push(\"quality=\".concat(transform.quality));\n      }\n\n      return params.join('&');\n    }\n  }]);\n\n  return StorageFileApi;\n}();\n\nexport { StorageFileApi as default };","map":{"version":3,"mappings":"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","names":["isStorageError","StorageError","get","post","remove","resolveFetch","DEFAULT_SEARCH_OPTIONS","limit","offset","sortBy","column","order","DEFAULT_FILE_OPTIONS","cacheControl","contentType","upsert","StorageFileApi","url","headers","bucketId","fetch","method","path","fileBody","fileOptions","options","Object","String","Blob","body","FormData","append","cleanPath","_removeEmptyFolders","_path","_getFinalPath","duplex","res","ok","data","error","json","uploadOrUpdate","token","URL","searchParams","set","toString","signedUrl","fromPath","toPath","sourceKey","destinationKey","Key","expiresIn","transform","downloadQueryParam","download","encodeURI","signedURL","paths","map","datum","wantsTransformation","renderPath","transformationQuery","transformOptsToQueryString","queryString","noResolveJson","blob","_queryString","push","join","publicUrl","prefixes","parameters","prefix","replace","params","width","height","resize","format","quality"],"sources":["C:\\Users\\mumta\\crewmates\\client\\node_modules\\@supabase\\storage-js\\src\\packages\\StorageFileApi.ts"],"sourcesContent":["import { isStorageError, StorageError } from '../lib/errors'\r\nimport { Fetch, get, post, remove } from '../lib/fetch'\r\nimport { resolveFetch } from '../lib/helpers'\r\nimport {\r\n  FileObject,\r\n  FileOptions,\r\n  SearchOptions,\r\n  FetchParameters,\r\n  TransformOptions,\r\n} from '../lib/types'\r\n\r\nconst DEFAULT_SEARCH_OPTIONS = {\r\n  limit: 100,\r\n  offset: 0,\r\n  sortBy: {\r\n    column: 'name',\r\n    order: 'asc',\r\n  },\r\n}\r\n\r\nconst DEFAULT_FILE_OPTIONS: FileOptions = {\r\n  cacheControl: '3600',\r\n  contentType: 'text/plain;charset=UTF-8',\r\n  upsert: false,\r\n}\r\n\r\ntype FileBody =\r\n  | ArrayBuffer\r\n  | ArrayBufferView\r\n  | Blob\r\n  | Buffer\r\n  | File\r\n  | FormData\r\n  | NodeJS.ReadableStream\r\n  | ReadableStream<Uint8Array>\r\n  | URLSearchParams\r\n  | string\r\n\r\nexport default class StorageFileApi {\r\n  protected url: string\r\n  protected headers: { [key: string]: string }\r\n  protected bucketId?: string\r\n  protected fetch: Fetch\r\n\r\n  constructor(\r\n    url: string,\r\n    headers: { [key: string]: string } = {},\r\n    bucketId?: string,\r\n    fetch?: Fetch\r\n  ) {\r\n    this.url = url\r\n    this.headers = headers\r\n    this.bucketId = bucketId\r\n    this.fetch = resolveFetch(fetch)\r\n  }\r\n\r\n  /**\r\n   * Uploads a file to an existing bucket or replaces an existing file at the specified path with a new one.\r\n   *\r\n   * @param method HTTP method.\r\n   * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\r\n   * @param fileBody The body of the file to be stored in the bucket.\r\n   */\r\n  private async uploadOrUpdate(\r\n    method: 'POST' | 'PUT',\r\n    path: string,\r\n    fileBody: FileBody,\r\n    fileOptions?: FileOptions\r\n  ): Promise<\r\n    | {\r\n        data: { path: string }\r\n        error: null\r\n      }\r\n    | {\r\n        data: null\r\n        error: StorageError\r\n      }\r\n  > {\r\n    try {\r\n      let body\r\n      const options = { ...DEFAULT_FILE_OPTIONS, ...fileOptions }\r\n      const headers: Record<string, string> = {\r\n        ...this.headers,\r\n        ...(method === 'POST' && { 'x-upsert': String(options.upsert as boolean) }),\r\n      }\r\n\r\n      if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\r\n        body = new FormData()\r\n        body.append('cacheControl', options.cacheControl as string)\r\n        body.append('', fileBody)\r\n      } else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\r\n        body = fileBody\r\n        body.append('cacheControl', options.cacheControl as string)\r\n      } else {\r\n        body = fileBody\r\n        headers['cache-control'] = `max-age=${options.cacheControl}`\r\n        headers['content-type'] = options.contentType as string\r\n      }\r\n\r\n      const cleanPath = this._removeEmptyFolders(path)\r\n      const _path = this._getFinalPath(cleanPath)\r\n      const res = await this.fetch(`${this.url}/object/${_path}`, {\r\n        method,\r\n        body: body as BodyInit,\r\n        headers,\r\n        ...(options?.duplex ? { duplex: options.duplex } : {}),\r\n      })\r\n\r\n      if (res.ok) {\r\n        return {\r\n          data: { path: cleanPath },\r\n          error: null,\r\n        }\r\n      } else {\r\n        const error = await res.json()\r\n        return { data: null, error }\r\n      }\r\n    } catch (error) {\r\n      if (isStorageError(error)) {\r\n        return { data: null, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Uploads a file to an existing bucket.\r\n   *\r\n   * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\r\n   * @param fileBody The body of the file to be stored in the bucket.\r\n   */\r\n  async upload(\r\n    path: string,\r\n    fileBody: FileBody,\r\n    fileOptions?: FileOptions\r\n  ): Promise<\r\n    | {\r\n        data: { path: string }\r\n        error: null\r\n      }\r\n    | {\r\n        data: null\r\n        error: StorageError\r\n      }\r\n  > {\r\n    return this.uploadOrUpdate('POST', path, fileBody, fileOptions)\r\n  }\r\n\r\n  /**\r\n   * Upload a file with a token generated from `createUploadSignedUrl`.\r\n   * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\r\n   * @param token The token generated from `createUploadSignedUrl`\r\n   * @param fileBody The body of the file to be stored in the bucket.\r\n   */\r\n  async uploadToSignedUrl(\r\n    path: string,\r\n    token: string,\r\n    fileBody: FileBody,\r\n    fileOptions?: FileOptions\r\n  ) {\r\n    const cleanPath = this._removeEmptyFolders(path)\r\n    const _path = this._getFinalPath(cleanPath)\r\n\r\n    const url = new URL(this.url + `/object/upload/sign/${_path}`)\r\n    url.searchParams.set('token', token)\r\n\r\n    try {\r\n      let body\r\n      const options = { upsert: DEFAULT_FILE_OPTIONS.upsert, ...fileOptions }\r\n      const headers: Record<string, string> = {\r\n        ...this.headers,\r\n        ...{ 'x-upsert': String(options.upsert as boolean) },\r\n      }\r\n\r\n      if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\r\n        body = new FormData()\r\n        body.append('cacheControl', options.cacheControl as string)\r\n        body.append('', fileBody)\r\n      } else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\r\n        body = fileBody\r\n        body.append('cacheControl', options.cacheControl as string)\r\n      } else {\r\n        body = fileBody\r\n        headers['cache-control'] = `max-age=${options.cacheControl}`\r\n        headers['content-type'] = options.contentType as string\r\n      }\r\n\r\n      const res = await this.fetch(url.toString(), {\r\n        method: 'PUT',\r\n        body: body as BodyInit,\r\n        headers,\r\n      })\r\n\r\n      if (res.ok) {\r\n        return {\r\n          data: { path: cleanPath },\r\n          error: null,\r\n        }\r\n      } else {\r\n        const error = await res.json()\r\n        return { data: null, error }\r\n      }\r\n    } catch (error) {\r\n      if (isStorageError(error)) {\r\n        return { data: null, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates a signed upload URL.\r\n   * Signed upload URLs can be used upload files to the bucket without further authentication.\r\n   * They are valid for one minute.\r\n   * @param path The file path, including the current file name. For example `folder/image.png`.\r\n   */\r\n  async createSignedUploadUrl(\r\n    path: string\r\n  ): Promise<\r\n    | {\r\n        data: { signedUrl: string; token: string; path: string }\r\n        error: null\r\n      }\r\n    | {\r\n        data: null\r\n        error: StorageError\r\n      }\r\n  > {\r\n    try {\r\n      let _path = this._getFinalPath(path)\r\n\r\n      const data = await post(\r\n        this.fetch,\r\n        `${this.url}/object/upload/sign/${_path}`,\r\n        {},\r\n        { headers: this.headers }\r\n      )\r\n\r\n      const url = new URL(this.url + data.url)\r\n\r\n      const token = url.searchParams.get('token')\r\n\r\n      if (!token) {\r\n        throw new StorageError('No token returned by API')\r\n      }\r\n\r\n      return { data: { signedUrl: url.toString(), path, token }, error: null }\r\n    } catch (error) {\r\n      if (isStorageError(error)) {\r\n        return { data: null, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Replaces an existing file at the specified path with a new one.\r\n   *\r\n   * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to update.\r\n   * @param fileBody The body of the file to be stored in the bucket.\r\n   */\r\n  async update(\r\n    path: string,\r\n    fileBody:\r\n      | ArrayBuffer\r\n      | ArrayBufferView\r\n      | Blob\r\n      | Buffer\r\n      | File\r\n      | FormData\r\n      | NodeJS.ReadableStream\r\n      | ReadableStream<Uint8Array>\r\n      | URLSearchParams\r\n      | string,\r\n    fileOptions?: FileOptions\r\n  ): Promise<\r\n    | {\r\n        data: { path: string }\r\n        error: null\r\n      }\r\n    | {\r\n        data: null\r\n        error: StorageError\r\n      }\r\n  > {\r\n    return this.uploadOrUpdate('PUT', path, fileBody, fileOptions)\r\n  }\r\n\r\n  /**\r\n   * Moves an existing file to a new path in the same bucket.\r\n   *\r\n   * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\r\n   * @param toPath The new file path, including the new file name. For example `folder/image-new.png`.\r\n   */\r\n  async move(\r\n    fromPath: string,\r\n    toPath: string\r\n  ): Promise<\r\n    | {\r\n        data: { message: string }\r\n        error: null\r\n      }\r\n    | {\r\n        data: null\r\n        error: StorageError\r\n      }\r\n  > {\r\n    try {\r\n      const data = await post(\r\n        this.fetch,\r\n        `${this.url}/object/move`,\r\n        { bucketId: this.bucketId, sourceKey: fromPath, destinationKey: toPath },\r\n        { headers: this.headers }\r\n      )\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      if (isStorageError(error)) {\r\n        return { data: null, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Copies an existing file to a new path in the same bucket.\r\n   *\r\n   * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\r\n   * @param toPath The new file path, including the new file name. For example `folder/image-copy.png`.\r\n   */\r\n  async copy(\r\n    fromPath: string,\r\n    toPath: string\r\n  ): Promise<\r\n    | {\r\n        data: { path: string }\r\n        error: null\r\n      }\r\n    | {\r\n        data: null\r\n        error: StorageError\r\n      }\r\n  > {\r\n    try {\r\n      const data = await post(\r\n        this.fetch,\r\n        `${this.url}/object/copy`,\r\n        { bucketId: this.bucketId, sourceKey: fromPath, destinationKey: toPath },\r\n        { headers: this.headers }\r\n      )\r\n      return { data: { path: data.Key }, error: null }\r\n    } catch (error) {\r\n      if (isStorageError(error)) {\r\n        return { data: null, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates a signed URL. Use a signed URL to share a file for a fixed amount of time.\r\n   *\r\n   * @param path The file path, including the current file name. For example `folder/image.png`.\r\n   * @param expiresIn The number of seconds until the signed URL expires. For example, `60` for a URL which is valid for one minute.\r\n   * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\r\n   * @param options.transform Transform the asset before serving it to the client.\r\n   */\r\n  async createSignedUrl(\r\n    path: string,\r\n    expiresIn: number,\r\n    options?: { download?: string | boolean; transform?: TransformOptions }\r\n  ): Promise<\r\n    | {\r\n        data: { signedUrl: string }\r\n        error: null\r\n      }\r\n    | {\r\n        data: null\r\n        error: StorageError\r\n      }\r\n  > {\r\n    try {\r\n      let _path = this._getFinalPath(path)\r\n\r\n      let data = await post(\r\n        this.fetch,\r\n        `${this.url}/object/sign/${_path}`,\r\n        { expiresIn, ...(options?.transform ? { transform: options.transform } : {}) },\r\n        { headers: this.headers }\r\n      )\r\n      const downloadQueryParam = options?.download\r\n        ? `&download=${options.download === true ? '' : options.download}`\r\n        : ''\r\n      const signedUrl = encodeURI(`${this.url}${data.signedURL}${downloadQueryParam}`)\r\n      data = { signedUrl }\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      if (isStorageError(error)) {\r\n        return { data: null, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates multiple signed URLs. Use a signed URL to share a file for a fixed amount of time.\r\n   *\r\n   * @param paths The file paths to be downloaded, including the current file names. For example `['folder/image.png', 'folder2/image2.png']`.\r\n   * @param expiresIn The number of seconds until the signed URLs expire. For example, `60` for URLs which are valid for one minute.\r\n   * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\r\n   */\r\n  async createSignedUrls(\r\n    paths: string[],\r\n    expiresIn: number,\r\n    options?: { download: string | boolean }\r\n  ): Promise<\r\n    | {\r\n        data: { error: string | null; path: string | null; signedUrl: string }[]\r\n        error: null\r\n      }\r\n    | {\r\n        data: null\r\n        error: StorageError\r\n      }\r\n  > {\r\n    try {\r\n      const data = await post(\r\n        this.fetch,\r\n        `${this.url}/object/sign/${this.bucketId}`,\r\n        { expiresIn, paths },\r\n        { headers: this.headers }\r\n      )\r\n\r\n      const downloadQueryParam = options?.download\r\n        ? `&download=${options.download === true ? '' : options.download}`\r\n        : ''\r\n      return {\r\n        data: data.map((datum: { signedURL: string }) => ({\r\n          ...datum,\r\n          signedUrl: datum.signedURL\r\n            ? encodeURI(`${this.url}${datum.signedURL}${downloadQueryParam}`)\r\n            : null,\r\n        })),\r\n        error: null,\r\n      }\r\n    } catch (error) {\r\n      if (isStorageError(error)) {\r\n        return { data: null, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Downloads a file from a private bucket. For public buckets, make a request to the URL returned from `getPublicUrl` instead.\r\n   *\r\n   * @param path The full path and file name of the file to be downloaded. For example `folder/image.png`.\r\n   * @param options.transform Transform the asset before serving it to the client.\r\n   */\r\n  async download(\r\n    path: string,\r\n    options?: { transform?: TransformOptions }\r\n  ): Promise<\r\n    | {\r\n        data: Blob\r\n        error: null\r\n      }\r\n    | {\r\n        data: null\r\n        error: StorageError\r\n      }\r\n  > {\r\n    const wantsTransformation = typeof options?.transform !== 'undefined'\r\n    const renderPath = wantsTransformation ? 'render/image/authenticated' : 'object'\r\n    const transformationQuery = this.transformOptsToQueryString(options?.transform || {})\r\n    const queryString = transformationQuery ? `?${transformationQuery}` : ''\r\n\r\n    try {\r\n      const _path = this._getFinalPath(path)\r\n      const res = await get(this.fetch, `${this.url}/${renderPath}/${_path}${queryString}`, {\r\n        headers: this.headers,\r\n        noResolveJson: true,\r\n      })\r\n      const data = await res.blob()\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      if (isStorageError(error)) {\r\n        return { data: null, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A simple convenience function to get the URL for an asset in a public bucket. If you do not want to use this function, you can construct the public URL by concatenating the bucket URL with the path to the asset.\r\n   * This function does not verify if the bucket is public. If a public URL is created for a bucket which is not public, you will not be able to download the asset.\r\n   *\r\n   * @param path The path and name of the file to generate the public URL for. For example `folder/image.png`.\r\n   * @param options.download Triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\r\n   * @param options.transform Transform the asset before serving it to the client.\r\n   */\r\n  getPublicUrl(\r\n    path: string,\r\n    options?: { download?: string | boolean; transform?: TransformOptions }\r\n  ): { data: { publicUrl: string } } {\r\n    const _path = this._getFinalPath(path)\r\n    const _queryString = []\r\n\r\n    const downloadQueryParam = options?.download\r\n      ? `download=${options.download === true ? '' : options.download}`\r\n      : ''\r\n\r\n    if (downloadQueryParam !== '') {\r\n      _queryString.push(downloadQueryParam)\r\n    }\r\n\r\n    const wantsTransformation = typeof options?.transform !== 'undefined'\r\n    const renderPath = wantsTransformation ? 'render/image' : 'object'\r\n    const transformationQuery = this.transformOptsToQueryString(options?.transform || {})\r\n\r\n    if (transformationQuery !== '') {\r\n      _queryString.push(transformationQuery)\r\n    }\r\n\r\n    let queryString = _queryString.join('&')\r\n    if (queryString !== '') {\r\n      queryString = `?${queryString}`\r\n    }\r\n\r\n    return {\r\n      data: { publicUrl: encodeURI(`${this.url}/${renderPath}/public/${_path}${queryString}`) },\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deletes files within the same bucket\r\n   *\r\n   * @param paths An array of files to delete, including the path and file name. For example [`'folder/image.png'`].\r\n   */\r\n  async remove(\r\n    paths: string[]\r\n  ): Promise<\r\n    | {\r\n        data: FileObject[]\r\n        error: null\r\n      }\r\n    | {\r\n        data: null\r\n        error: StorageError\r\n      }\r\n  > {\r\n    try {\r\n      const data = await remove(\r\n        this.fetch,\r\n        `${this.url}/object/${this.bucketId}`,\r\n        { prefixes: paths },\r\n        { headers: this.headers }\r\n      )\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      if (isStorageError(error)) {\r\n        return { data: null, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get file metadata\r\n   * @param id the file id to retrieve metadata\r\n   */\r\n  // async getMetadata(\r\n  //   id: string\r\n  // ): Promise<\r\n  //   | {\r\n  //       data: Metadata\r\n  //       error: null\r\n  //     }\r\n  //   | {\r\n  //       data: null\r\n  //       error: StorageError\r\n  //     }\r\n  // > {\r\n  //   try {\r\n  //     const data = await get(this.fetch, `${this.url}/metadata/${id}`, { headers: this.headers })\r\n  //     return { data, error: null }\r\n  //   } catch (error) {\r\n  //     if (isStorageError(error)) {\r\n  //       return { data: null, error }\r\n  //     }\r\n\r\n  //     throw error\r\n  //   }\r\n  // }\r\n\r\n  /**\r\n   * Update file metadata\r\n   * @param id the file id to update metadata\r\n   * @param meta the new file metadata\r\n   */\r\n  // async updateMetadata(\r\n  //   id: string,\r\n  //   meta: Metadata\r\n  // ): Promise<\r\n  //   | {\r\n  //       data: Metadata\r\n  //       error: null\r\n  //     }\r\n  //   | {\r\n  //       data: null\r\n  //       error: StorageError\r\n  //     }\r\n  // > {\r\n  //   try {\r\n  //     const data = await post(\r\n  //       this.fetch,\r\n  //       `${this.url}/metadata/${id}`,\r\n  //       { ...meta },\r\n  //       { headers: this.headers }\r\n  //     )\r\n  //     return { data, error: null }\r\n  //   } catch (error) {\r\n  //     if (isStorageError(error)) {\r\n  //       return { data: null, error }\r\n  //     }\r\n\r\n  //     throw error\r\n  //   }\r\n  // }\r\n\r\n  /**\r\n   * Lists all the files within a bucket.\r\n   * @param path The folder path.\r\n   */\r\n  async list(\r\n    path?: string,\r\n    options?: SearchOptions,\r\n    parameters?: FetchParameters\r\n  ): Promise<\r\n    | {\r\n        data: FileObject[]\r\n        error: null\r\n      }\r\n    | {\r\n        data: null\r\n        error: StorageError\r\n      }\r\n  > {\r\n    try {\r\n      const body = { ...DEFAULT_SEARCH_OPTIONS, ...options, prefix: path || '' }\r\n      const data = await post(\r\n        this.fetch,\r\n        `${this.url}/object/list/${this.bucketId}`,\r\n        body,\r\n        { headers: this.headers },\r\n        parameters\r\n      )\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      if (isStorageError(error)) {\r\n        return { data: null, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n\r\n  private _getFinalPath(path: string) {\r\n    return `${this.bucketId}/${path}`\r\n  }\r\n\r\n  private _removeEmptyFolders(path: string) {\r\n    return path.replace(/^\\/|\\/$/g, '').replace(/\\/+/g, '/')\r\n  }\r\n\r\n  private transformOptsToQueryString(transform: TransformOptions) {\r\n    const params = []\r\n    if (transform.width) {\r\n      params.push(`width=${transform.width}`)\r\n    }\r\n\r\n    if (transform.height) {\r\n      params.push(`height=${transform.height}`)\r\n    }\r\n\r\n    if (transform.resize) {\r\n      params.push(`resize=${transform.resize}`)\r\n    }\r\n\r\n    if (transform.format) {\r\n      params.push(`format=${transform.format}`)\r\n    }\r\n\r\n    if (transform.quality) {\r\n      params.push(`quality=${transform.quality}`)\r\n    }\r\n\r\n    return params.join('&')\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}