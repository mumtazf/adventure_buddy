{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { resolveFetch } from './helper';\nimport { FunctionsFetchError, FunctionsHttpError, FunctionsRelayError } from './types';\nexport class FunctionsClient {\n  constructor(url) {\n    let {\n      headers = {},\n      customFetch\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.url = url;\n    this.headers = headers;\n    this.fetch = resolveFetch(customFetch);\n  }\n  /**\r\n   * Updates the authorization header\r\n   * @param token - the new jwt token sent in the authorisation header\r\n   */\n\n\n  setAuth(token) {\n    this.headers.Authorization = `Bearer ${token}`;\n  }\n  /**\r\n   * Invokes a function\r\n   * @param functionName - The name of the Function to invoke.\r\n   * @param options - Options for invoking the Function.\r\n   */\n\n\n  invoke(functionName) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    var _a;\n\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const {\n          headers,\n          method,\n          body: functionArgs\n        } = options;\n        let _headers = {};\n        let body;\n\n        if (functionArgs && (headers && !Object.prototype.hasOwnProperty.call(headers, 'Content-Type') || !headers)) {\n          if (typeof Blob !== 'undefined' && functionArgs instanceof Blob || functionArgs instanceof ArrayBuffer) {\n            // will work for File as File inherits Blob\n            // also works for ArrayBuffer as it is the same underlying structure as a Blob\n            _headers['Content-Type'] = 'application/octet-stream';\n            body = functionArgs;\n          } else if (typeof functionArgs === 'string') {\n            // plain string\n            _headers['Content-Type'] = 'text/plain';\n            body = functionArgs;\n          } else if (typeof FormData !== 'undefined' && functionArgs instanceof FormData) {\n            // don't set content-type headers\n            // Request will automatically add the right boundary value\n            body = functionArgs;\n          } else {\n            // default, assume this is JSON\n            _headers['Content-Type'] = 'application/json';\n            body = JSON.stringify(functionArgs);\n          }\n        }\n\n        const response = yield this.fetch(`${this.url}/${functionName}`, {\n          method: method || 'POST',\n          // headers priority is (high to low):\n          // 1. invoke-level headers\n          // 2. client-level headers\n          // 3. default Content-Type header\n          headers: Object.assign(Object.assign(Object.assign({}, _headers), this.headers), headers),\n          body\n        }).catch(fetchError => {\n          throw new FunctionsFetchError(fetchError);\n        });\n        const isRelayError = response.headers.get('x-relay-error');\n\n        if (isRelayError && isRelayError === 'true') {\n          throw new FunctionsRelayError(response);\n        }\n\n        if (!response.ok) {\n          throw new FunctionsHttpError(response);\n        }\n\n        let responseType = ((_a = response.headers.get('Content-Type')) !== null && _a !== void 0 ? _a : 'text/plain').split(';')[0].trim();\n        let data;\n\n        if (responseType === 'application/json') {\n          data = yield response.json();\n        } else if (responseType === 'application/octet-stream') {\n          data = yield response.blob();\n        } else if (responseType === 'multipart/form-data') {\n          data = yield response.formData();\n        } else {\n          // default to text\n          data = yield response.text();\n        }\n\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        return {\n          data: null,\n          error\n        };\n      }\n    });\n  }\n\n}","map":{"version":3,"mappings":"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","names":["resolveFetch","FunctionsFetchError","FunctionsHttpError","FunctionsRelayError","FunctionsClient","constructor","url","headers","customFetch","fetch","setAuth","token","Authorization","invoke","functionName","options","method","body","functionArgs","_headers","Object","prototype","hasOwnProperty","call","Blob","ArrayBuffer","FormData","JSON","stringify","response","catch","fetchError","isRelayError","get","ok","responseType","_a","split","trim","data","json","blob","formData","text","error"],"sources":["C:\\Users\\mumta\\crewmates\\client\\node_modules\\@supabase\\functions-js\\src\\FunctionsClient.ts"],"sourcesContent":["import { resolveFetch } from './helper'\r\nimport {\r\n  Fetch,\r\n  FunctionsFetchError,\r\n  FunctionsHttpError,\r\n  FunctionsRelayError,\r\n  FunctionsResponse,\r\n  FunctionInvokeOptions,\r\n} from './types'\r\n\r\nexport class FunctionsClient {\r\n  protected url: string\r\n  protected headers: Record<string, string>\r\n  protected fetch: Fetch\r\n\r\n  constructor(\r\n    url: string,\r\n    {\r\n      headers = {},\r\n      customFetch,\r\n    }: {\r\n      headers?: Record<string, string>\r\n      customFetch?: Fetch\r\n    } = {}\r\n  ) {\r\n    this.url = url\r\n    this.headers = headers\r\n    this.fetch = resolveFetch(customFetch)\r\n  }\r\n\r\n  /**\r\n   * Updates the authorization header\r\n   * @param token - the new jwt token sent in the authorisation header\r\n   */\r\n  setAuth(token: string) {\r\n    this.headers.Authorization = `Bearer ${token}`\r\n  }\r\n\r\n  /**\r\n   * Invokes a function\r\n   * @param functionName - The name of the Function to invoke.\r\n   * @param options - Options for invoking the Function.\r\n   */\r\n  async invoke<T = any>(\r\n    functionName: string,\r\n    options: FunctionInvokeOptions = {}\r\n  ): Promise<FunctionsResponse<T>> {\r\n    try {\r\n      const { headers, method, body: functionArgs } = options\r\n\r\n      let _headers: Record<string, string> = {}\r\n      let body: any\r\n      if (\r\n        functionArgs &&\r\n        ((headers && !Object.prototype.hasOwnProperty.call(headers, 'Content-Type')) || !headers)\r\n      ) {\r\n        if (\r\n          (typeof Blob !== 'undefined' && functionArgs instanceof Blob) ||\r\n          functionArgs instanceof ArrayBuffer\r\n        ) {\r\n          // will work for File as File inherits Blob\r\n          // also works for ArrayBuffer as it is the same underlying structure as a Blob\r\n          _headers['Content-Type'] = 'application/octet-stream'\r\n          body = functionArgs\r\n        } else if (typeof functionArgs === 'string') {\r\n          // plain string\r\n          _headers['Content-Type'] = 'text/plain'\r\n          body = functionArgs\r\n        } else if (typeof FormData !== 'undefined' && functionArgs instanceof FormData) {\r\n          // don't set content-type headers\r\n          // Request will automatically add the right boundary value\r\n          body = functionArgs\r\n        } else {\r\n          // default, assume this is JSON\r\n          _headers['Content-Type'] = 'application/json'\r\n          body = JSON.stringify(functionArgs)\r\n        }\r\n      }\r\n\r\n      const response = await this.fetch(`${this.url}/${functionName}`, {\r\n        method: method || 'POST',\r\n        // headers priority is (high to low):\r\n        // 1. invoke-level headers\r\n        // 2. client-level headers\r\n        // 3. default Content-Type header\r\n        headers: { ..._headers, ...this.headers, ...headers },\r\n        body,\r\n      }).catch((fetchError) => {\r\n        throw new FunctionsFetchError(fetchError)\r\n      })\r\n\r\n      const isRelayError = response.headers.get('x-relay-error')\r\n      if (isRelayError && isRelayError === 'true') {\r\n        throw new FunctionsRelayError(response)\r\n      }\r\n\r\n      if (!response.ok) {\r\n        throw new FunctionsHttpError(response)\r\n      }\r\n\r\n      let responseType = (response.headers.get('Content-Type') ?? 'text/plain').split(';')[0].trim()\r\n      let data: any\r\n      if (responseType === 'application/json') {\r\n        data = await response.json()\r\n      } else if (responseType === 'application/octet-stream') {\r\n        data = await response.blob()\r\n      } else if (responseType === 'multipart/form-data') {\r\n        data = await response.formData()\r\n      } else {\r\n        // default to text\r\n        data = await response.text()\r\n      }\r\n\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      return { data: null, error }\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}